/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.datatypes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.datatypes.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.datatypes.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DataTypeTest";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDataTypeTest
entryRuleDataTypeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeTestRule()); }
	 iv_ruleDataTypeTest=ruleDataTypeTest 
	 { $current=$iv_ruleDataTypeTest.current; } 
	 EOF 
;

// Rule DataTypeTest
ruleDataTypeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataTypeTestAccess().getDataTypeTestAction_0(),
            $current);
    }
)	otherlv_1='DataTypeTest' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataTypeTestAccess().getDataTypeTestKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAIDID0ParserRuleCall_2_0()); 
	    }
		lv_aID_2_0=ruleID0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aID",
        		lv_aID_2_0, 
        		"ID0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataTypeTestAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='aAnySimpleType' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0()); 
	    }
		lv_aAnySimpleType_5_0=ruleAnySimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aAnySimpleType",
        		lv_aAnySimpleType_5_0, 
        		"AnySimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='aAnyURI' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataTypeTestAccess().getAAnyURIKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAAnyURIAnyURIParserRuleCall_5_1_0()); 
	    }
		lv_aAnyURI_7_0=ruleAnyURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aAnyURI",
        		lv_aAnyURI_7_0, 
        		"AnyURI");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='aBase64Binary' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataTypeTestAccess().getABase64BinaryKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getABase64BinaryBase64BinaryParserRuleCall_6_1_0()); 
	    }
		lv_aBase64Binary_9_0=ruleBase64Binary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aBase64Binary",
        		lv_aBase64Binary_9_0, 
        		"Base64Binary");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='aBoolean' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDataTypeTestAccess().getABooleanKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getABooleanBooleanParserRuleCall_7_1_0()); 
	    }
		lv_aBoolean_11_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aBoolean",
        		lv_aBoolean_11_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_12='aByte' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDataTypeTestAccess().getAByteKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAByteByteParserRuleCall_8_1_0()); 
	    }
		lv_aByte_13_0=ruleByte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aByte",
        		lv_aByte_13_0, 
        		"Byte");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14='aDate' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDataTypeTestAccess().getADateKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getADateDateParserRuleCall_9_1_0()); 
	    }
		lv_aDate_15_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aDate",
        		lv_aDate_15_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_16='aDateTime' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDataTypeTestAccess().getADateTimeKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getADateTimeDateTimeParserRuleCall_10_1_0()); 
	    }
		lv_aDateTime_17_0=ruleDateTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aDateTime",
        		lv_aDateTime_17_0, 
        		"DateTime");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_18='aDecimal' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDataTypeTestAccess().getADecimalKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getADecimalDecimalParserRuleCall_11_1_0()); 
	    }
		lv_aDecimal_19_0=ruleDecimal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aDecimal",
        		lv_aDecimal_19_0, 
        		"Decimal");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_20='aDouble' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getDataTypeTestAccess().getADoubleKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getADoubleDoubleParserRuleCall_12_1_0()); 
	    }
		lv_aDouble_21_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aDouble",
        		lv_aDouble_21_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_22='aDuration' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getDataTypeTestAccess().getADurationKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getADurationDurationParserRuleCall_13_1_0()); 
	    }
		lv_aDuration_23_0=ruleDuration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aDuration",
        		lv_aDuration_23_0, 
        		"Duration");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_24='aEntities' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getDataTypeTestAccess().getAEntitiesKeyword_14_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAEntitiesENTITIESParserRuleCall_14_1_0()); 
	    }
		lv_aEntities_25_0=ruleENTITIES		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aEntities",
        		lv_aEntities_25_0, 
        		"ENTITIES");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_26='aEntity' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getDataTypeTestAccess().getAEntityKeyword_15_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAEntityENTITYParserRuleCall_15_1_0()); 
	    }
		lv_aEntity_27_0=ruleENTITY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aEntity",
        		lv_aEntity_27_0, 
        		"ENTITY");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_28='aFloat' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getDataTypeTestAccess().getAFloatKeyword_16_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAFloatFloatParserRuleCall_16_1_0()); 
	    }
		lv_aFloat_29_0=ruleFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aFloat",
        		lv_aFloat_29_0, 
        		"Float");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_30='aGDay' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getDataTypeTestAccess().getAGDayKeyword_17_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAGDayGDayParserRuleCall_17_1_0()); 
	    }
		lv_aGDay_31_0=ruleGDay		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aGDay",
        		lv_aGDay_31_0, 
        		"GDay");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_32='aGMonth' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getDataTypeTestAccess().getAGMonthKeyword_18_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAGMonthGMonthParserRuleCall_18_1_0()); 
	    }
		lv_aGMonth_33_0=ruleGMonth		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aGMonth",
        		lv_aGMonth_33_0, 
        		"GMonth");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_34='aGMonthDay' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getDataTypeTestAccess().getAGMonthDayKeyword_19_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAGMonthDayGMonthDayParserRuleCall_19_1_0()); 
	    }
		lv_aGMonthDay_35_0=ruleGMonthDay		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aGMonthDay",
        		lv_aGMonthDay_35_0, 
        		"GMonthDay");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_36='aGYear' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getDataTypeTestAccess().getAGYearKeyword_20_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAGYearGYearParserRuleCall_20_1_0()); 
	    }
		lv_aGYear_37_0=ruleGYear		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aGYear",
        		lv_aGYear_37_0, 
        		"GYear");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_38='aGYearMonth' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getDataTypeTestAccess().getAGYearMonthKeyword_21_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAGYearMonthGYearMonthParserRuleCall_21_1_0()); 
	    }
		lv_aGYearMonth_39_0=ruleGYearMonth		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aGYearMonth",
        		lv_aGYearMonth_39_0, 
        		"GYearMonth");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_40='aHexBinary' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getDataTypeTestAccess().getAHexBinaryKeyword_22_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAHexBinaryHexBinaryParserRuleCall_22_1_0()); 
	    }
		lv_aHexBinary_41_0=ruleHexBinary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aHexBinary",
        		lv_aHexBinary_41_0, 
        		"HexBinary");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_42='aIDREF' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getDataTypeTestAccess().getAIDREFKeyword_23_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAIDREFIDREFParserRuleCall_23_1_0()); 
	    }
		lv_aIDREF_43_0=ruleIDREF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aIDREF",
        		lv_aIDREF_43_0, 
        		"IDREF");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_44='aIDREFS' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getDataTypeTestAccess().getAIDREFSKeyword_24_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAIDREFSIDREFSParserRuleCall_24_1_0()); 
	    }
		lv_aIDREFS_45_0=ruleIDREFS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aIDREFS",
        		lv_aIDREFS_45_0, 
        		"IDREFS");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_46='aInt' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getDataTypeTestAccess().getAIntKeyword_25_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAIntInt0ParserRuleCall_25_1_0()); 
	    }
		lv_aInt_47_0=ruleInt0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aInt",
        		lv_aInt_47_0, 
        		"Int0");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_48='aInteger' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getDataTypeTestAccess().getAIntegerKeyword_26_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAIntegerIntegerParserRuleCall_26_1_0()); 
	    }
		lv_aInteger_49_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aInteger",
        		lv_aInteger_49_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_50='aLanguage' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getDataTypeTestAccess().getALanguageKeyword_27_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getALanguageLanguageParserRuleCall_27_1_0()); 
	    }
		lv_aLanguage_51_0=ruleLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aLanguage",
        		lv_aLanguage_51_0, 
        		"Language");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_52='aLong' 
    {
    	newLeafNode(otherlv_52, grammarAccess.getDataTypeTestAccess().getALongKeyword_28_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getALongLongParserRuleCall_28_1_0()); 
	    }
		lv_aLong_53_0=ruleLong		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aLong",
        		lv_aLong_53_0, 
        		"Long");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_54='aName' 
    {
    	newLeafNode(otherlv_54, grammarAccess.getDataTypeTestAccess().getANameKeyword_29_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANameNameParserRuleCall_29_1_0()); 
	    }
		lv_aName_55_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aName",
        		lv_aName_55_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_56='aNCName' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getDataTypeTestAccess().getANCNameKeyword_30_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANCNameNCNameParserRuleCall_30_1_0()); 
	    }
		lv_aNCName_57_0=ruleNCName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aNCName",
        		lv_aNCName_57_0, 
        		"NCName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_58='aNMTOKEN' 
    {
    	newLeafNode(otherlv_58, grammarAccess.getDataTypeTestAccess().getANMTOKENKeyword_31_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANMTOKENNMTOKENParserRuleCall_31_1_0()); 
	    }
		lv_aNMTOKEN_59_0=ruleNMTOKEN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aNMTOKEN",
        		lv_aNMTOKEN_59_0, 
        		"NMTOKEN");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_60='aNMTOKENS' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getDataTypeTestAccess().getANMTOKENSKeyword_32_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANMTOKENSNMTOKENSParserRuleCall_32_1_0()); 
	    }
		lv_aNMTOKENS_61_0=ruleNMTOKENS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aNMTOKENS",
        		lv_aNMTOKENS_61_0, 
        		"NMTOKENS");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_62='aNonNegativeInteger' 
    {
    	newLeafNode(otherlv_62, grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerKeyword_33_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0()); 
	    }
		lv_aNonNegativeInteger_63_0=ruleNonNegativeInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aNonNegativeInteger",
        		lv_aNonNegativeInteger_63_0, 
        		"NonNegativeInteger");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_64='aNonPositiveInteger' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerKeyword_34_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0()); 
	    }
		lv_aNonPositiveInteger_65_0=ruleNonPositiveInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aNonPositiveInteger",
        		lv_aNonPositiveInteger_65_0, 
        		"NonPositiveInteger");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_66='aPositiveInteger' 
    {
    	newLeafNode(otherlv_66, grammarAccess.getDataTypeTestAccess().getAPositiveIntegerKeyword_35_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0()); 
	    }
		lv_aPositiveInteger_67_0=rulePositiveInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aPositiveInteger",
        		lv_aPositiveInteger_67_0, 
        		"PositiveInteger");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_68='aQName' 
    {
    	newLeafNode(otherlv_68, grammarAccess.getDataTypeTestAccess().getAQNameKeyword_36_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAQNameQNameParserRuleCall_36_1_0()); 
	    }
		lv_aQName_69_0=ruleQName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aQName",
        		lv_aQName_69_0, 
        		"QName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_70='aShort' 
    {
    	newLeafNode(otherlv_70, grammarAccess.getDataTypeTestAccess().getAShortKeyword_37_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAShortShortParserRuleCall_37_1_0()); 
	    }
		lv_aShort_71_0=ruleShort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aShort",
        		lv_aShort_71_0, 
        		"Short");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_72='aString' 
    {
    	newLeafNode(otherlv_72, grammarAccess.getDataTypeTestAccess().getAStringKeyword_38_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAStringString0ParserRuleCall_38_1_0()); 
	    }
		lv_aString_73_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aString",
        		lv_aString_73_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_74='aTime' 
    {
    	newLeafNode(otherlv_74, grammarAccess.getDataTypeTestAccess().getATimeKeyword_39_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getATimeTimeParserRuleCall_39_1_0()); 
	    }
		lv_aTime_75_0=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aTime",
        		lv_aTime_75_0, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_76='aToken' 
    {
    	newLeafNode(otherlv_76, grammarAccess.getDataTypeTestAccess().getATokenKeyword_40_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getATokenTokenParserRuleCall_40_1_0()); 
	    }
		lv_aToken_77_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aToken",
        		lv_aToken_77_0, 
        		"Token");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_78='aUnsignedByte' 
    {
    	newLeafNode(otherlv_78, grammarAccess.getDataTypeTestAccess().getAUnsignedByteKeyword_41_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAUnsignedByteUnsignedByteParserRuleCall_41_1_0()); 
	    }
		lv_aUnsignedByte_79_0=ruleUnsignedByte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aUnsignedByte",
        		lv_aUnsignedByte_79_0, 
        		"UnsignedByte");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_80='aUnsignedInt' 
    {
    	newLeafNode(otherlv_80, grammarAccess.getDataTypeTestAccess().getAUnsignedIntKeyword_42_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAUnsignedIntUnsignedIntParserRuleCall_42_1_0()); 
	    }
		lv_aUnsignedInt_81_0=ruleUnsignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aUnsignedInt",
        		lv_aUnsignedInt_81_0, 
        		"UnsignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_82='aUnsignedLong' 
    {
    	newLeafNode(otherlv_82, grammarAccess.getDataTypeTestAccess().getAUnsignedLongKeyword_43_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAUnsignedLongUnsignedLongParserRuleCall_43_1_0()); 
	    }
		lv_aUnsignedLong_83_0=ruleUnsignedLong		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aUnsignedLong",
        		lv_aUnsignedLong_83_0, 
        		"UnsignedLong");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_84='aUnsignedShort' 
    {
    	newLeafNode(otherlv_84, grammarAccess.getDataTypeTestAccess().getAUnsignedShortKeyword_44_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeTestAccess().getAUnsignedShortUnsignedShortParserRuleCall_44_1_0()); 
	    }
		lv_aUnsignedShort_85_0=ruleUnsignedShort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeTestRule());
	        }
       		set(
       			$current, 
       			"aUnsignedShort",
        		lv_aUnsignedShort_85_0, 
        		"UnsignedShort");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_86='}' 
    {
    	newLeafNode(otherlv_86, grammarAccess.getDataTypeTestAccess().getRightCurlyBracketKeyword_45());
    }
)
;





// Entry rule entryRuleAnySimpleType
entryRuleAnySimpleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnySimpleTypeRule()); } 
	 iv_ruleAnySimpleType=ruleAnySimpleType 
	 { $current=$iv_ruleAnySimpleType.current.getText(); }  
	 EOF 
;

// Rule AnySimpleType
ruleAnySimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='AnySimpleType' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnySimpleTypeAccess().getAnySimpleTypeKeyword()); 
    }

    ;





// Entry rule entryRuleAnyURI
entryRuleAnyURI returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyURIRule()); } 
	 iv_ruleAnyURI=ruleAnyURI 
	 { $current=$iv_ruleAnyURI.current.getText(); }  
	 EOF 
;

// Rule AnyURI
ruleAnyURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='AnyURI' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnyURIAccess().getAnyURIKeyword()); 
    }

    ;





// Entry rule entryRuleBase64Binary
entryRuleBase64Binary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBase64BinaryRule()); } 
	 iv_ruleBase64Binary=ruleBase64Binary 
	 { $current=$iv_ruleBase64Binary.current.getText(); }  
	 EOF 
;

// Rule Base64Binary
ruleBase64Binary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Base64Binary' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase64BinaryAccess().getBase64BinaryKeyword()); 
    }

    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getBooleanKeyword()); 
    }

    ;





// Entry rule entryRuleByte
entryRuleByte returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getByteRule()); } 
	 iv_ruleByte=ruleByte 
	 { $current=$iv_ruleByte.current.getText(); }  
	 EOF 
;

// Rule Byte
ruleByte returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getByteAccess().getByteKeyword()); 
    }

    ;





// Entry rule entryRuleDate
entryRuleDate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); } 
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current.getText(); }  
	 EOF 
;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Date' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateAccess().getDateKeyword()); 
    }

    ;





// Entry rule entryRuleDateTime
entryRuleDateTime returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateTimeRule()); } 
	 iv_ruleDateTime=ruleDateTime 
	 { $current=$iv_ruleDateTime.current.getText(); }  
	 EOF 
;

// Rule DateTime
ruleDateTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DateTime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateTimeAccess().getDateTimeKeyword()); 
    }

    ;





// Entry rule entryRuleDecimal
entryRuleDecimal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalRule()); } 
	 iv_ruleDecimal=ruleDecimal 
	 { $current=$iv_ruleDecimal.current.getText(); }  
	 EOF 
;

// Rule Decimal
ruleDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getDecimalKeyword()); 
    }

    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getDoubleKeyword()); 
    }

    ;





// Entry rule entryRuleDuration
entryRuleDuration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDurationRule()); } 
	 iv_ruleDuration=ruleDuration 
	 { $current=$iv_ruleDuration.current.getText(); }  
	 EOF 
;

// Rule Duration
ruleDuration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Duration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDurationAccess().getDurationKeyword()); 
    }

    ;





// Entry rule entryRuleENTITIES
entryRuleENTITIES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getENTITIESRule()); } 
	 iv_ruleENTITIES=ruleENTITIES 
	 { $current=$iv_ruleENTITIES.current.getText(); }  
	 EOF 
;

// Rule ENTITIES
ruleENTITIES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ENTITIES' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getENTITIESAccess().getENTITIESKeyword()); 
    }

    ;





// Entry rule entryRuleENTITY
entryRuleENTITY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getENTITYRule()); } 
	 iv_ruleENTITY=ruleENTITY 
	 { $current=$iv_ruleENTITY.current.getText(); }  
	 EOF 
;

// Rule ENTITY
ruleENTITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ENTITY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getENTITYAccess().getENTITYKeyword()); 
    }

    ;





// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); } 
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current.getText(); }  
	 EOF 
;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFloatKeyword()); 
    }

    ;





// Entry rule entryRuleGDay
entryRuleGDay returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDayRule()); } 
	 iv_ruleGDay=ruleGDay 
	 { $current=$iv_ruleGDay.current.getText(); }  
	 EOF 
;

// Rule GDay
ruleGDay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='GDay' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGDayAccess().getGDayKeyword()); 
    }

    ;





// Entry rule entryRuleGMonth
entryRuleGMonth returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGMonthRule()); } 
	 iv_ruleGMonth=ruleGMonth 
	 { $current=$iv_ruleGMonth.current.getText(); }  
	 EOF 
;

// Rule GMonth
ruleGMonth returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='GMonth' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGMonthAccess().getGMonthKeyword()); 
    }

    ;





// Entry rule entryRuleGMonthDay
entryRuleGMonthDay returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGMonthDayRule()); } 
	 iv_ruleGMonthDay=ruleGMonthDay 
	 { $current=$iv_ruleGMonthDay.current.getText(); }  
	 EOF 
;

// Rule GMonthDay
ruleGMonthDay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='GMonthDay' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGMonthDayAccess().getGMonthDayKeyword()); 
    }

    ;





// Entry rule entryRuleGYear
entryRuleGYear returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGYearRule()); } 
	 iv_ruleGYear=ruleGYear 
	 { $current=$iv_ruleGYear.current.getText(); }  
	 EOF 
;

// Rule GYear
ruleGYear returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='GYear' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGYearAccess().getGYearKeyword()); 
    }

    ;





// Entry rule entryRuleGYearMonth
entryRuleGYearMonth returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGYearMonthRule()); } 
	 iv_ruleGYearMonth=ruleGYearMonth 
	 { $current=$iv_ruleGYearMonth.current.getText(); }  
	 EOF 
;

// Rule GYearMonth
ruleGYearMonth returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='GYearMonth' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGYearMonthAccess().getGYearMonthKeyword()); 
    }

    ;





// Entry rule entryRuleHexBinary
entryRuleHexBinary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexBinaryRule()); } 
	 iv_ruleHexBinary=ruleHexBinary 
	 { $current=$iv_ruleHexBinary.current.getText(); }  
	 EOF 
;

// Rule HexBinary
ruleHexBinary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='HexBinary' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHexBinaryAccess().getHexBinaryKeyword()); 
    }

    ;





// Entry rule entryRuleID0
entryRuleID0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getID0Rule()); } 
	 iv_ruleID0=ruleID0 
	 { $current=$iv_ruleID0.current.getText(); }  
	 EOF 
;

// Rule ID0
ruleID0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ID' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID0Access().getIDKeyword()); 
    }

    ;





// Entry rule entryRuleIDREF
entryRuleIDREF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDREFRule()); } 
	 iv_ruleIDREF=ruleIDREF 
	 { $current=$iv_ruleIDREF.current.getText(); }  
	 EOF 
;

// Rule IDREF
ruleIDREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='IDREF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDREFAccess().getIDREFKeyword()); 
    }

    ;





// Entry rule entryRuleIDREFS
entryRuleIDREFS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDREFSRule()); } 
	 iv_ruleIDREFS=ruleIDREFS 
	 { $current=$iv_ruleIDREFS.current.getText(); }  
	 EOF 
;

// Rule IDREFS
ruleIDREFS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='IDREFS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDREFSAccess().getIDREFSKeyword()); 
    }

    ;





// Entry rule entryRuleInt0
entryRuleInt0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInt0Rule()); } 
	 iv_ruleInt0=ruleInt0 
	 { $current=$iv_ruleInt0.current.getText(); }  
	 EOF 
;

// Rule Int0
ruleInt0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInt0Access().getIntKeyword()); 
    }

    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getIntegerKeyword()); 
    }

    ;





// Entry rule entryRuleLanguage
entryRuleLanguage returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageRule()); } 
	 iv_ruleLanguage=ruleLanguage 
	 { $current=$iv_ruleLanguage.current.getText(); }  
	 EOF 
;

// Rule Language
ruleLanguage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Language' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLanguageAccess().getLanguageKeyword()); 
    }

    ;





// Entry rule entryRuleLong
entryRuleLong returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongRule()); } 
	 iv_ruleLong=ruleLong 
	 { $current=$iv_ruleLong.current.getText(); }  
	 EOF 
;

// Rule Long
ruleLong returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLongAccess().getLongKeyword()); 
    }

    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Name' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getNameKeyword()); 
    }

    ;





// Entry rule entryRuleNCName
entryRuleNCName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNCNameRule()); } 
	 iv_ruleNCName=ruleNCName 
	 { $current=$iv_ruleNCName.current.getText(); }  
	 EOF 
;

// Rule NCName
ruleNCName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NCName' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNCNameAccess().getNCNameKeyword()); 
    }

    ;





// Entry rule entryRuleNMTOKEN
entryRuleNMTOKEN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNMTOKENRule()); } 
	 iv_ruleNMTOKEN=ruleNMTOKEN 
	 { $current=$iv_ruleNMTOKEN.current.getText(); }  
	 EOF 
;

// Rule NMTOKEN
ruleNMTOKEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NMTOKEN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNMTOKENAccess().getNMTOKENKeyword()); 
    }

    ;





// Entry rule entryRuleNMTOKENS
entryRuleNMTOKENS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNMTOKENSRule()); } 
	 iv_ruleNMTOKENS=ruleNMTOKENS 
	 { $current=$iv_ruleNMTOKENS.current.getText(); }  
	 EOF 
;

// Rule NMTOKENS
ruleNMTOKENS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NMTOKENS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNMTOKENSAccess().getNMTOKENSKeyword()); 
    }

    ;





// Entry rule entryRuleNonNegativeInteger
entryRuleNonNegativeInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonNegativeIntegerRule()); } 
	 iv_ruleNonNegativeInteger=ruleNonNegativeInteger 
	 { $current=$iv_ruleNonNegativeInteger.current.getText(); }  
	 EOF 
;

// Rule NonNegativeInteger
ruleNonNegativeInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NonNegativeInteger' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNonNegativeIntegerAccess().getNonNegativeIntegerKeyword()); 
    }

    ;





// Entry rule entryRuleNonPositiveInteger
entryRuleNonPositiveInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonPositiveIntegerRule()); } 
	 iv_ruleNonPositiveInteger=ruleNonPositiveInteger 
	 { $current=$iv_ruleNonPositiveInteger.current.getText(); }  
	 EOF 
;

// Rule NonPositiveInteger
ruleNonPositiveInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NonPositiveInteger' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNonPositiveIntegerAccess().getNonPositiveIntegerKeyword()); 
    }

    ;





// Entry rule entryRulePositiveInteger
entryRulePositiveInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositiveIntegerRule()); } 
	 iv_rulePositiveInteger=rulePositiveInteger 
	 { $current=$iv_rulePositiveInteger.current.getText(); }  
	 EOF 
;

// Rule PositiveInteger
rulePositiveInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='PositiveInteger' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPositiveIntegerAccess().getPositiveIntegerKeyword()); 
    }

    ;





// Entry rule entryRuleQName
entryRuleQName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQNameRule()); } 
	 iv_ruleQName=ruleQName 
	 { $current=$iv_ruleQName.current.getText(); }  
	 EOF 
;

// Rule QName
ruleQName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='QName' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQNameAccess().getQNameKeyword()); 
    }

    ;





// Entry rule entryRuleShort
entryRuleShort returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getShortRule()); } 
	 iv_ruleShort=ruleShort 
	 { $current=$iv_ruleShort.current.getText(); }  
	 EOF 
;

// Rule Short
ruleShort returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShortAccess().getShortKeyword()); 
    }

    ;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getString0Access().getStringKeyword()); 
    }

    ;





// Entry rule entryRuleTime
entryRuleTime returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeRule()); } 
	 iv_ruleTime=ruleTime 
	 { $current=$iv_ruleTime.current.getText(); }  
	 EOF 
;

// Rule Time
ruleTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Time' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeAccess().getTimeKeyword()); 
    }

    ;





// Entry rule entryRuleToken
entryRuleToken returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); } 
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current.getText(); }  
	 EOF 
;

// Rule Token
ruleToken returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Token' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTokenAccess().getTokenKeyword()); 
    }

    ;





// Entry rule entryRuleUnsignedByte
entryRuleUnsignedByte returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedByteRule()); } 
	 iv_ruleUnsignedByte=ruleUnsignedByte 
	 { $current=$iv_ruleUnsignedByte.current.getText(); }  
	 EOF 
;

// Rule UnsignedByte
ruleUnsignedByte returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='UnsignedByte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsignedByteAccess().getUnsignedByteKeyword()); 
    }

    ;





// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedIntRule()); } 
	 iv_ruleUnsignedInt=ruleUnsignedInt 
	 { $current=$iv_ruleUnsignedInt.current.getText(); }  
	 EOF 
;

// Rule UnsignedInt
ruleUnsignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='UnsignedInt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsignedIntAccess().getUnsignedIntKeyword()); 
    }

    ;





// Entry rule entryRuleUnsignedLong
entryRuleUnsignedLong returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedLongRule()); } 
	 iv_ruleUnsignedLong=ruleUnsignedLong 
	 { $current=$iv_ruleUnsignedLong.current.getText(); }  
	 EOF 
;

// Rule UnsignedLong
ruleUnsignedLong returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='UnsignedLong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsignedLongAccess().getUnsignedLongKeyword()); 
    }

    ;





// Entry rule entryRuleUnsignedShort
entryRuleUnsignedShort returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedShortRule()); } 
	 iv_ruleUnsignedShort=ruleUnsignedShort 
	 { $current=$iv_ruleUnsignedShort.current.getText(); }  
	 EOF 
;

// Rule UnsignedShort
ruleUnsignedShort returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='UnsignedShort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsignedShortAccess().getUnsignedShortKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


