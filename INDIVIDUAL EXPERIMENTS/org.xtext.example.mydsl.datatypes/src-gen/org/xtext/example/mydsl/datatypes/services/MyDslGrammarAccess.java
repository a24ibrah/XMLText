/*
* generated by Xtext
*/
package org.xtext.example.mydsl.datatypes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataTypeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataTypeTestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAIDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAIDID0ParserRuleCall_2_0 = (RuleCall)cAIDAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAAnySimpleTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAAnySimpleTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0 = (RuleCall)cAAnySimpleTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAAnyURIKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAAnyURIAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAAnyURIAnyURIParserRuleCall_5_1_0 = (RuleCall)cAAnyURIAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cABase64BinaryKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cABase64BinaryAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cABase64BinaryBase64BinaryParserRuleCall_6_1_0 = (RuleCall)cABase64BinaryAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cABooleanKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cABooleanAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cABooleanBooleanParserRuleCall_7_1_0 = (RuleCall)cABooleanAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAByteKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAByteAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAByteByteParserRuleCall_8_1_0 = (RuleCall)cAByteAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cADateKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cADateAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cADateDateParserRuleCall_9_1_0 = (RuleCall)cADateAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cADateTimeKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cADateTimeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cADateTimeDateTimeParserRuleCall_10_1_0 = (RuleCall)cADateTimeAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cADecimalKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cADecimalAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cADecimalDecimalParserRuleCall_11_1_0 = (RuleCall)cADecimalAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cADoubleKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cADoubleAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cADoubleDoubleParserRuleCall_12_1_0 = (RuleCall)cADoubleAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cADurationKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cADurationAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cADurationDurationParserRuleCall_13_1_0 = (RuleCall)cADurationAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cAEntitiesKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cAEntitiesAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cAEntitiesENTITIESParserRuleCall_14_1_0 = (RuleCall)cAEntitiesAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cAEntityKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cAEntityAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cAEntityENTITYParserRuleCall_15_1_0 = (RuleCall)cAEntityAssignment_15_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cAFloatKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cAFloatAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cAFloatFloatParserRuleCall_16_1_0 = (RuleCall)cAFloatAssignment_16_1.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cAGDayKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cAGDayAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cAGDayGDayParserRuleCall_17_1_0 = (RuleCall)cAGDayAssignment_17_1.eContents().get(0);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cAGMonthKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cAGMonthAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cAGMonthGMonthParserRuleCall_18_1_0 = (RuleCall)cAGMonthAssignment_18_1.eContents().get(0);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cAGMonthDayKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cAGMonthDayAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cAGMonthDayGMonthDayParserRuleCall_19_1_0 = (RuleCall)cAGMonthDayAssignment_19_1.eContents().get(0);
		private final Group cGroup_20 = (Group)cGroup.eContents().get(20);
		private final Keyword cAGYearKeyword_20_0 = (Keyword)cGroup_20.eContents().get(0);
		private final Assignment cAGYearAssignment_20_1 = (Assignment)cGroup_20.eContents().get(1);
		private final RuleCall cAGYearGYearParserRuleCall_20_1_0 = (RuleCall)cAGYearAssignment_20_1.eContents().get(0);
		private final Group cGroup_21 = (Group)cGroup.eContents().get(21);
		private final Keyword cAGYearMonthKeyword_21_0 = (Keyword)cGroup_21.eContents().get(0);
		private final Assignment cAGYearMonthAssignment_21_1 = (Assignment)cGroup_21.eContents().get(1);
		private final RuleCall cAGYearMonthGYearMonthParserRuleCall_21_1_0 = (RuleCall)cAGYearMonthAssignment_21_1.eContents().get(0);
		private final Group cGroup_22 = (Group)cGroup.eContents().get(22);
		private final Keyword cAHexBinaryKeyword_22_0 = (Keyword)cGroup_22.eContents().get(0);
		private final Assignment cAHexBinaryAssignment_22_1 = (Assignment)cGroup_22.eContents().get(1);
		private final RuleCall cAHexBinaryHexBinaryParserRuleCall_22_1_0 = (RuleCall)cAHexBinaryAssignment_22_1.eContents().get(0);
		private final Group cGroup_23 = (Group)cGroup.eContents().get(23);
		private final Keyword cAIDREFKeyword_23_0 = (Keyword)cGroup_23.eContents().get(0);
		private final Assignment cAIDREFAssignment_23_1 = (Assignment)cGroup_23.eContents().get(1);
		private final RuleCall cAIDREFIDREFParserRuleCall_23_1_0 = (RuleCall)cAIDREFAssignment_23_1.eContents().get(0);
		private final Group cGroup_24 = (Group)cGroup.eContents().get(24);
		private final Keyword cAIDREFSKeyword_24_0 = (Keyword)cGroup_24.eContents().get(0);
		private final Assignment cAIDREFSAssignment_24_1 = (Assignment)cGroup_24.eContents().get(1);
		private final RuleCall cAIDREFSIDREFSParserRuleCall_24_1_0 = (RuleCall)cAIDREFSAssignment_24_1.eContents().get(0);
		private final Group cGroup_25 = (Group)cGroup.eContents().get(25);
		private final Keyword cAIntKeyword_25_0 = (Keyword)cGroup_25.eContents().get(0);
		private final Assignment cAIntAssignment_25_1 = (Assignment)cGroup_25.eContents().get(1);
		private final RuleCall cAIntInt0ParserRuleCall_25_1_0 = (RuleCall)cAIntAssignment_25_1.eContents().get(0);
		private final Group cGroup_26 = (Group)cGroup.eContents().get(26);
		private final Keyword cAIntegerKeyword_26_0 = (Keyword)cGroup_26.eContents().get(0);
		private final Assignment cAIntegerAssignment_26_1 = (Assignment)cGroup_26.eContents().get(1);
		private final RuleCall cAIntegerIntegerParserRuleCall_26_1_0 = (RuleCall)cAIntegerAssignment_26_1.eContents().get(0);
		private final Group cGroup_27 = (Group)cGroup.eContents().get(27);
		private final Keyword cALanguageKeyword_27_0 = (Keyword)cGroup_27.eContents().get(0);
		private final Assignment cALanguageAssignment_27_1 = (Assignment)cGroup_27.eContents().get(1);
		private final RuleCall cALanguageLanguageParserRuleCall_27_1_0 = (RuleCall)cALanguageAssignment_27_1.eContents().get(0);
		private final Group cGroup_28 = (Group)cGroup.eContents().get(28);
		private final Keyword cALongKeyword_28_0 = (Keyword)cGroup_28.eContents().get(0);
		private final Assignment cALongAssignment_28_1 = (Assignment)cGroup_28.eContents().get(1);
		private final RuleCall cALongLongParserRuleCall_28_1_0 = (RuleCall)cALongAssignment_28_1.eContents().get(0);
		private final Group cGroup_29 = (Group)cGroup.eContents().get(29);
		private final Keyword cANameKeyword_29_0 = (Keyword)cGroup_29.eContents().get(0);
		private final Assignment cANameAssignment_29_1 = (Assignment)cGroup_29.eContents().get(1);
		private final RuleCall cANameNameParserRuleCall_29_1_0 = (RuleCall)cANameAssignment_29_1.eContents().get(0);
		private final Group cGroup_30 = (Group)cGroup.eContents().get(30);
		private final Keyword cANCNameKeyword_30_0 = (Keyword)cGroup_30.eContents().get(0);
		private final Assignment cANCNameAssignment_30_1 = (Assignment)cGroup_30.eContents().get(1);
		private final RuleCall cANCNameNCNameParserRuleCall_30_1_0 = (RuleCall)cANCNameAssignment_30_1.eContents().get(0);
		private final Group cGroup_31 = (Group)cGroup.eContents().get(31);
		private final Keyword cANMTOKENKeyword_31_0 = (Keyword)cGroup_31.eContents().get(0);
		private final Assignment cANMTOKENAssignment_31_1 = (Assignment)cGroup_31.eContents().get(1);
		private final RuleCall cANMTOKENNMTOKENParserRuleCall_31_1_0 = (RuleCall)cANMTOKENAssignment_31_1.eContents().get(0);
		private final Group cGroup_32 = (Group)cGroup.eContents().get(32);
		private final Keyword cANMTOKENSKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Assignment cANMTOKENSAssignment_32_1 = (Assignment)cGroup_32.eContents().get(1);
		private final RuleCall cANMTOKENSNMTOKENSParserRuleCall_32_1_0 = (RuleCall)cANMTOKENSAssignment_32_1.eContents().get(0);
		private final Group cGroup_33 = (Group)cGroup.eContents().get(33);
		private final Keyword cANonNegativeIntegerKeyword_33_0 = (Keyword)cGroup_33.eContents().get(0);
		private final Assignment cANonNegativeIntegerAssignment_33_1 = (Assignment)cGroup_33.eContents().get(1);
		private final RuleCall cANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0 = (RuleCall)cANonNegativeIntegerAssignment_33_1.eContents().get(0);
		private final Group cGroup_34 = (Group)cGroup.eContents().get(34);
		private final Keyword cANonPositiveIntegerKeyword_34_0 = (Keyword)cGroup_34.eContents().get(0);
		private final Assignment cANonPositiveIntegerAssignment_34_1 = (Assignment)cGroup_34.eContents().get(1);
		private final RuleCall cANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0 = (RuleCall)cANonPositiveIntegerAssignment_34_1.eContents().get(0);
		private final Group cGroup_35 = (Group)cGroup.eContents().get(35);
		private final Keyword cAPositiveIntegerKeyword_35_0 = (Keyword)cGroup_35.eContents().get(0);
		private final Assignment cAPositiveIntegerAssignment_35_1 = (Assignment)cGroup_35.eContents().get(1);
		private final RuleCall cAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0 = (RuleCall)cAPositiveIntegerAssignment_35_1.eContents().get(0);
		private final Group cGroup_36 = (Group)cGroup.eContents().get(36);
		private final Keyword cAQNameKeyword_36_0 = (Keyword)cGroup_36.eContents().get(0);
		private final Assignment cAQNameAssignment_36_1 = (Assignment)cGroup_36.eContents().get(1);
		private final RuleCall cAQNameQNameParserRuleCall_36_1_0 = (RuleCall)cAQNameAssignment_36_1.eContents().get(0);
		private final Group cGroup_37 = (Group)cGroup.eContents().get(37);
		private final Keyword cAShortKeyword_37_0 = (Keyword)cGroup_37.eContents().get(0);
		private final Assignment cAShortAssignment_37_1 = (Assignment)cGroup_37.eContents().get(1);
		private final RuleCall cAShortShortParserRuleCall_37_1_0 = (RuleCall)cAShortAssignment_37_1.eContents().get(0);
		private final Group cGroup_38 = (Group)cGroup.eContents().get(38);
		private final Keyword cAStringKeyword_38_0 = (Keyword)cGroup_38.eContents().get(0);
		private final Assignment cAStringAssignment_38_1 = (Assignment)cGroup_38.eContents().get(1);
		private final RuleCall cAStringString0ParserRuleCall_38_1_0 = (RuleCall)cAStringAssignment_38_1.eContents().get(0);
		private final Group cGroup_39 = (Group)cGroup.eContents().get(39);
		private final Keyword cATimeKeyword_39_0 = (Keyword)cGroup_39.eContents().get(0);
		private final Assignment cATimeAssignment_39_1 = (Assignment)cGroup_39.eContents().get(1);
		private final RuleCall cATimeTimeParserRuleCall_39_1_0 = (RuleCall)cATimeAssignment_39_1.eContents().get(0);
		private final Group cGroup_40 = (Group)cGroup.eContents().get(40);
		private final Keyword cATokenKeyword_40_0 = (Keyword)cGroup_40.eContents().get(0);
		private final Assignment cATokenAssignment_40_1 = (Assignment)cGroup_40.eContents().get(1);
		private final RuleCall cATokenTokenParserRuleCall_40_1_0 = (RuleCall)cATokenAssignment_40_1.eContents().get(0);
		private final Group cGroup_41 = (Group)cGroup.eContents().get(41);
		private final Keyword cAUnsignedByteKeyword_41_0 = (Keyword)cGroup_41.eContents().get(0);
		private final Assignment cAUnsignedByteAssignment_41_1 = (Assignment)cGroup_41.eContents().get(1);
		private final RuleCall cAUnsignedByteUnsignedByteParserRuleCall_41_1_0 = (RuleCall)cAUnsignedByteAssignment_41_1.eContents().get(0);
		private final Group cGroup_42 = (Group)cGroup.eContents().get(42);
		private final Keyword cAUnsignedIntKeyword_42_0 = (Keyword)cGroup_42.eContents().get(0);
		private final Assignment cAUnsignedIntAssignment_42_1 = (Assignment)cGroup_42.eContents().get(1);
		private final RuleCall cAUnsignedIntUnsignedIntParserRuleCall_42_1_0 = (RuleCall)cAUnsignedIntAssignment_42_1.eContents().get(0);
		private final Group cGroup_43 = (Group)cGroup.eContents().get(43);
		private final Keyword cAUnsignedLongKeyword_43_0 = (Keyword)cGroup_43.eContents().get(0);
		private final Assignment cAUnsignedLongAssignment_43_1 = (Assignment)cGroup_43.eContents().get(1);
		private final RuleCall cAUnsignedLongUnsignedLongParserRuleCall_43_1_0 = (RuleCall)cAUnsignedLongAssignment_43_1.eContents().get(0);
		private final Group cGroup_44 = (Group)cGroup.eContents().get(44);
		private final Keyword cAUnsignedShortKeyword_44_0 = (Keyword)cGroup_44.eContents().get(0);
		private final Assignment cAUnsignedShortAssignment_44_1 = (Assignment)cGroup_44.eContents().get(1);
		private final RuleCall cAUnsignedShortUnsignedShortParserRuleCall_44_1_0 = (RuleCall)cAUnsignedShortAssignment_44_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_45 = (Keyword)cGroup.eContents().get(45);
		
		//DataTypeTest:
		//	{DataTypeTest} "DataTypeTest" aID=ID0 "{" ("aAnySimpleType" aAnySimpleType=AnySimpleType)? ("aAnyURI"
		//	aAnyURI=AnyURI)? ("aBase64Binary" aBase64Binary=Base64Binary)? ("aBoolean" aBoolean=Boolean)? ("aByte" aByte=Byte)?
		//	("aDate" aDate=Date)? ("aDateTime" aDateTime=DateTime)? ("aDecimal" aDecimal=Decimal)? ("aDouble" aDouble=Double)?
		//	("aDuration" aDuration=Duration)? ("aEntities" aEntities=ENTITIES)? ("aEntity" aEntity=ENTITY)? ("aFloat"
		//	aFloat=Float)? ("aGDay" aGDay=GDay)? ("aGMonth" aGMonth=GMonth)? ("aGMonthDay" aGMonthDay=GMonthDay)? ("aGYear"
		//	aGYear=GYear)? ("aGYearMonth" aGYearMonth=GYearMonth)? ("aHexBinary" aHexBinary=HexBinary)? ("aIDREF" aIDREF=IDREF)?
		//	("aIDREFS" aIDREFS=IDREFS)? ("aInt" aInt=Int0)? ("aInteger" aInteger=Integer)? ("aLanguage" aLanguage=Language)?
		//	("aLong" aLong=Long)? ("aName" aName=Name)? ("aNCName" aNCName=NCName)? ("aNMTOKEN" aNMTOKEN=NMTOKEN)? ("aNMTOKENS"
		//	aNMTOKENS=NMTOKENS)? ("aNonNegativeInteger" aNonNegativeInteger=NonNegativeInteger)? ("aNonPositiveInteger"
		//	aNonPositiveInteger=NonPositiveInteger)? ("aPositiveInteger" aPositiveInteger=PositiveInteger)? ("aQName"
		//	aQName=QName)? ("aShort" aShort=Short)? ("aString" aString=String0)? ("aTime" aTime=Time)? ("aToken" aToken=Token)?
		//	("aUnsignedByte" aUnsignedByte=UnsignedByte)? ("aUnsignedInt" aUnsignedInt=UnsignedInt)? ("aUnsignedLong"
		//	aUnsignedLong=UnsignedLong)? ("aUnsignedShort" aUnsignedShort=UnsignedShort)? "}";
		public ParserRule getRule() { return rule; }

		//{DataTypeTest} "DataTypeTest" aID=ID0 "{" ("aAnySimpleType" aAnySimpleType=AnySimpleType)? ("aAnyURI" aAnyURI=AnyURI)?
		//("aBase64Binary" aBase64Binary=Base64Binary)? ("aBoolean" aBoolean=Boolean)? ("aByte" aByte=Byte)? ("aDate"
		//aDate=Date)? ("aDateTime" aDateTime=DateTime)? ("aDecimal" aDecimal=Decimal)? ("aDouble" aDouble=Double)? ("aDuration"
		//aDuration=Duration)? ("aEntities" aEntities=ENTITIES)? ("aEntity" aEntity=ENTITY)? ("aFloat" aFloat=Float)? ("aGDay"
		//aGDay=GDay)? ("aGMonth" aGMonth=GMonth)? ("aGMonthDay" aGMonthDay=GMonthDay)? ("aGYear" aGYear=GYear)? ("aGYearMonth"
		//aGYearMonth=GYearMonth)? ("aHexBinary" aHexBinary=HexBinary)? ("aIDREF" aIDREF=IDREF)? ("aIDREFS" aIDREFS=IDREFS)?
		//("aInt" aInt=Int0)? ("aInteger" aInteger=Integer)? ("aLanguage" aLanguage=Language)? ("aLong" aLong=Long)? ("aName"
		//aName=Name)? ("aNCName" aNCName=NCName)? ("aNMTOKEN" aNMTOKEN=NMTOKEN)? ("aNMTOKENS" aNMTOKENS=NMTOKENS)?
		//("aNonNegativeInteger" aNonNegativeInteger=NonNegativeInteger)? ("aNonPositiveInteger"
		//aNonPositiveInteger=NonPositiveInteger)? ("aPositiveInteger" aPositiveInteger=PositiveInteger)? ("aQName"
		//aQName=QName)? ("aShort" aShort=Short)? ("aString" aString=String0)? ("aTime" aTime=Time)? ("aToken" aToken=Token)?
		//("aUnsignedByte" aUnsignedByte=UnsignedByte)? ("aUnsignedInt" aUnsignedInt=UnsignedInt)? ("aUnsignedLong"
		//aUnsignedLong=UnsignedLong)? ("aUnsignedShort" aUnsignedShort=UnsignedShort)? "}"
		public Group getGroup() { return cGroup; }

		//{DataTypeTest}
		public Action getDataTypeTestAction_0() { return cDataTypeTestAction_0; }

		//"DataTypeTest"
		public Keyword getDataTypeTestKeyword_1() { return cDataTypeTestKeyword_1; }

		//aID=ID0
		public Assignment getAIDAssignment_2() { return cAIDAssignment_2; }

		//ID0
		public RuleCall getAIDID0ParserRuleCall_2_0() { return cAIDID0ParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("aAnySimpleType" aAnySimpleType=AnySimpleType)?
		public Group getGroup_4() { return cGroup_4; }

		//"aAnySimpleType"
		public Keyword getAAnySimpleTypeKeyword_4_0() { return cAAnySimpleTypeKeyword_4_0; }

		//aAnySimpleType=AnySimpleType
		public Assignment getAAnySimpleTypeAssignment_4_1() { return cAAnySimpleTypeAssignment_4_1; }

		//AnySimpleType
		public RuleCall getAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0() { return cAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0; }

		//("aAnyURI" aAnyURI=AnyURI)?
		public Group getGroup_5() { return cGroup_5; }

		//"aAnyURI"
		public Keyword getAAnyURIKeyword_5_0() { return cAAnyURIKeyword_5_0; }

		//aAnyURI=AnyURI
		public Assignment getAAnyURIAssignment_5_1() { return cAAnyURIAssignment_5_1; }

		//AnyURI
		public RuleCall getAAnyURIAnyURIParserRuleCall_5_1_0() { return cAAnyURIAnyURIParserRuleCall_5_1_0; }

		//("aBase64Binary" aBase64Binary=Base64Binary)?
		public Group getGroup_6() { return cGroup_6; }

		//"aBase64Binary"
		public Keyword getABase64BinaryKeyword_6_0() { return cABase64BinaryKeyword_6_0; }

		//aBase64Binary=Base64Binary
		public Assignment getABase64BinaryAssignment_6_1() { return cABase64BinaryAssignment_6_1; }

		//Base64Binary
		public RuleCall getABase64BinaryBase64BinaryParserRuleCall_6_1_0() { return cABase64BinaryBase64BinaryParserRuleCall_6_1_0; }

		//("aBoolean" aBoolean=Boolean)?
		public Group getGroup_7() { return cGroup_7; }

		//"aBoolean"
		public Keyword getABooleanKeyword_7_0() { return cABooleanKeyword_7_0; }

		//aBoolean=Boolean
		public Assignment getABooleanAssignment_7_1() { return cABooleanAssignment_7_1; }

		//Boolean
		public RuleCall getABooleanBooleanParserRuleCall_7_1_0() { return cABooleanBooleanParserRuleCall_7_1_0; }

		//("aByte" aByte=Byte)?
		public Group getGroup_8() { return cGroup_8; }

		//"aByte"
		public Keyword getAByteKeyword_8_0() { return cAByteKeyword_8_0; }

		//aByte=Byte
		public Assignment getAByteAssignment_8_1() { return cAByteAssignment_8_1; }

		//Byte
		public RuleCall getAByteByteParserRuleCall_8_1_0() { return cAByteByteParserRuleCall_8_1_0; }

		//("aDate" aDate=Date)?
		public Group getGroup_9() { return cGroup_9; }

		//"aDate"
		public Keyword getADateKeyword_9_0() { return cADateKeyword_9_0; }

		//aDate=Date
		public Assignment getADateAssignment_9_1() { return cADateAssignment_9_1; }

		//Date
		public RuleCall getADateDateParserRuleCall_9_1_0() { return cADateDateParserRuleCall_9_1_0; }

		//("aDateTime" aDateTime=DateTime)?
		public Group getGroup_10() { return cGroup_10; }

		//"aDateTime"
		public Keyword getADateTimeKeyword_10_0() { return cADateTimeKeyword_10_0; }

		//aDateTime=DateTime
		public Assignment getADateTimeAssignment_10_1() { return cADateTimeAssignment_10_1; }

		//DateTime
		public RuleCall getADateTimeDateTimeParserRuleCall_10_1_0() { return cADateTimeDateTimeParserRuleCall_10_1_0; }

		//("aDecimal" aDecimal=Decimal)?
		public Group getGroup_11() { return cGroup_11; }

		//"aDecimal"
		public Keyword getADecimalKeyword_11_0() { return cADecimalKeyword_11_0; }

		//aDecimal=Decimal
		public Assignment getADecimalAssignment_11_1() { return cADecimalAssignment_11_1; }

		//Decimal
		public RuleCall getADecimalDecimalParserRuleCall_11_1_0() { return cADecimalDecimalParserRuleCall_11_1_0; }

		//("aDouble" aDouble=Double)?
		public Group getGroup_12() { return cGroup_12; }

		//"aDouble"
		public Keyword getADoubleKeyword_12_0() { return cADoubleKeyword_12_0; }

		//aDouble=Double
		public Assignment getADoubleAssignment_12_1() { return cADoubleAssignment_12_1; }

		//Double
		public RuleCall getADoubleDoubleParserRuleCall_12_1_0() { return cADoubleDoubleParserRuleCall_12_1_0; }

		//("aDuration" aDuration=Duration)?
		public Group getGroup_13() { return cGroup_13; }

		//"aDuration"
		public Keyword getADurationKeyword_13_0() { return cADurationKeyword_13_0; }

		//aDuration=Duration
		public Assignment getADurationAssignment_13_1() { return cADurationAssignment_13_1; }

		//Duration
		public RuleCall getADurationDurationParserRuleCall_13_1_0() { return cADurationDurationParserRuleCall_13_1_0; }

		//("aEntities" aEntities=ENTITIES)?
		public Group getGroup_14() { return cGroup_14; }

		//"aEntities"
		public Keyword getAEntitiesKeyword_14_0() { return cAEntitiesKeyword_14_0; }

		//aEntities=ENTITIES
		public Assignment getAEntitiesAssignment_14_1() { return cAEntitiesAssignment_14_1; }

		//ENTITIES
		public RuleCall getAEntitiesENTITIESParserRuleCall_14_1_0() { return cAEntitiesENTITIESParserRuleCall_14_1_0; }

		//("aEntity" aEntity=ENTITY)?
		public Group getGroup_15() { return cGroup_15; }

		//"aEntity"
		public Keyword getAEntityKeyword_15_0() { return cAEntityKeyword_15_0; }

		//aEntity=ENTITY
		public Assignment getAEntityAssignment_15_1() { return cAEntityAssignment_15_1; }

		//ENTITY
		public RuleCall getAEntityENTITYParserRuleCall_15_1_0() { return cAEntityENTITYParserRuleCall_15_1_0; }

		//("aFloat" aFloat=Float)?
		public Group getGroup_16() { return cGroup_16; }

		//"aFloat"
		public Keyword getAFloatKeyword_16_0() { return cAFloatKeyword_16_0; }

		//aFloat=Float
		public Assignment getAFloatAssignment_16_1() { return cAFloatAssignment_16_1; }

		//Float
		public RuleCall getAFloatFloatParserRuleCall_16_1_0() { return cAFloatFloatParserRuleCall_16_1_0; }

		//("aGDay" aGDay=GDay)?
		public Group getGroup_17() { return cGroup_17; }

		//"aGDay"
		public Keyword getAGDayKeyword_17_0() { return cAGDayKeyword_17_0; }

		//aGDay=GDay
		public Assignment getAGDayAssignment_17_1() { return cAGDayAssignment_17_1; }

		//GDay
		public RuleCall getAGDayGDayParserRuleCall_17_1_0() { return cAGDayGDayParserRuleCall_17_1_0; }

		//("aGMonth" aGMonth=GMonth)?
		public Group getGroup_18() { return cGroup_18; }

		//"aGMonth"
		public Keyword getAGMonthKeyword_18_0() { return cAGMonthKeyword_18_0; }

		//aGMonth=GMonth
		public Assignment getAGMonthAssignment_18_1() { return cAGMonthAssignment_18_1; }

		//GMonth
		public RuleCall getAGMonthGMonthParserRuleCall_18_1_0() { return cAGMonthGMonthParserRuleCall_18_1_0; }

		//("aGMonthDay" aGMonthDay=GMonthDay)?
		public Group getGroup_19() { return cGroup_19; }

		//"aGMonthDay"
		public Keyword getAGMonthDayKeyword_19_0() { return cAGMonthDayKeyword_19_0; }

		//aGMonthDay=GMonthDay
		public Assignment getAGMonthDayAssignment_19_1() { return cAGMonthDayAssignment_19_1; }

		//GMonthDay
		public RuleCall getAGMonthDayGMonthDayParserRuleCall_19_1_0() { return cAGMonthDayGMonthDayParserRuleCall_19_1_0; }

		//("aGYear" aGYear=GYear)?
		public Group getGroup_20() { return cGroup_20; }

		//"aGYear"
		public Keyword getAGYearKeyword_20_0() { return cAGYearKeyword_20_0; }

		//aGYear=GYear
		public Assignment getAGYearAssignment_20_1() { return cAGYearAssignment_20_1; }

		//GYear
		public RuleCall getAGYearGYearParserRuleCall_20_1_0() { return cAGYearGYearParserRuleCall_20_1_0; }

		//("aGYearMonth" aGYearMonth=GYearMonth)?
		public Group getGroup_21() { return cGroup_21; }

		//"aGYearMonth"
		public Keyword getAGYearMonthKeyword_21_0() { return cAGYearMonthKeyword_21_0; }

		//aGYearMonth=GYearMonth
		public Assignment getAGYearMonthAssignment_21_1() { return cAGYearMonthAssignment_21_1; }

		//GYearMonth
		public RuleCall getAGYearMonthGYearMonthParserRuleCall_21_1_0() { return cAGYearMonthGYearMonthParserRuleCall_21_1_0; }

		//("aHexBinary" aHexBinary=HexBinary)?
		public Group getGroup_22() { return cGroup_22; }

		//"aHexBinary"
		public Keyword getAHexBinaryKeyword_22_0() { return cAHexBinaryKeyword_22_0; }

		//aHexBinary=HexBinary
		public Assignment getAHexBinaryAssignment_22_1() { return cAHexBinaryAssignment_22_1; }

		//HexBinary
		public RuleCall getAHexBinaryHexBinaryParserRuleCall_22_1_0() { return cAHexBinaryHexBinaryParserRuleCall_22_1_0; }

		//("aIDREF" aIDREF=IDREF)?
		public Group getGroup_23() { return cGroup_23; }

		//"aIDREF"
		public Keyword getAIDREFKeyword_23_0() { return cAIDREFKeyword_23_0; }

		//aIDREF=IDREF
		public Assignment getAIDREFAssignment_23_1() { return cAIDREFAssignment_23_1; }

		//IDREF
		public RuleCall getAIDREFIDREFParserRuleCall_23_1_0() { return cAIDREFIDREFParserRuleCall_23_1_0; }

		//("aIDREFS" aIDREFS=IDREFS)?
		public Group getGroup_24() { return cGroup_24; }

		//"aIDREFS"
		public Keyword getAIDREFSKeyword_24_0() { return cAIDREFSKeyword_24_0; }

		//aIDREFS=IDREFS
		public Assignment getAIDREFSAssignment_24_1() { return cAIDREFSAssignment_24_1; }

		//IDREFS
		public RuleCall getAIDREFSIDREFSParserRuleCall_24_1_0() { return cAIDREFSIDREFSParserRuleCall_24_1_0; }

		//("aInt" aInt=Int0)?
		public Group getGroup_25() { return cGroup_25; }

		//"aInt"
		public Keyword getAIntKeyword_25_0() { return cAIntKeyword_25_0; }

		//aInt=Int0
		public Assignment getAIntAssignment_25_1() { return cAIntAssignment_25_1; }

		//Int0
		public RuleCall getAIntInt0ParserRuleCall_25_1_0() { return cAIntInt0ParserRuleCall_25_1_0; }

		//("aInteger" aInteger=Integer)?
		public Group getGroup_26() { return cGroup_26; }

		//"aInteger"
		public Keyword getAIntegerKeyword_26_0() { return cAIntegerKeyword_26_0; }

		//aInteger=Integer
		public Assignment getAIntegerAssignment_26_1() { return cAIntegerAssignment_26_1; }

		//Integer
		public RuleCall getAIntegerIntegerParserRuleCall_26_1_0() { return cAIntegerIntegerParserRuleCall_26_1_0; }

		//("aLanguage" aLanguage=Language)?
		public Group getGroup_27() { return cGroup_27; }

		//"aLanguage"
		public Keyword getALanguageKeyword_27_0() { return cALanguageKeyword_27_0; }

		//aLanguage=Language
		public Assignment getALanguageAssignment_27_1() { return cALanguageAssignment_27_1; }

		//Language
		public RuleCall getALanguageLanguageParserRuleCall_27_1_0() { return cALanguageLanguageParserRuleCall_27_1_0; }

		//("aLong" aLong=Long)?
		public Group getGroup_28() { return cGroup_28; }

		//"aLong"
		public Keyword getALongKeyword_28_0() { return cALongKeyword_28_0; }

		//aLong=Long
		public Assignment getALongAssignment_28_1() { return cALongAssignment_28_1; }

		//Long
		public RuleCall getALongLongParserRuleCall_28_1_0() { return cALongLongParserRuleCall_28_1_0; }

		//("aName" aName=Name)?
		public Group getGroup_29() { return cGroup_29; }

		//"aName"
		public Keyword getANameKeyword_29_0() { return cANameKeyword_29_0; }

		//aName=Name
		public Assignment getANameAssignment_29_1() { return cANameAssignment_29_1; }

		//Name
		public RuleCall getANameNameParserRuleCall_29_1_0() { return cANameNameParserRuleCall_29_1_0; }

		//("aNCName" aNCName=NCName)?
		public Group getGroup_30() { return cGroup_30; }

		//"aNCName"
		public Keyword getANCNameKeyword_30_0() { return cANCNameKeyword_30_0; }

		//aNCName=NCName
		public Assignment getANCNameAssignment_30_1() { return cANCNameAssignment_30_1; }

		//NCName
		public RuleCall getANCNameNCNameParserRuleCall_30_1_0() { return cANCNameNCNameParserRuleCall_30_1_0; }

		//("aNMTOKEN" aNMTOKEN=NMTOKEN)?
		public Group getGroup_31() { return cGroup_31; }

		//"aNMTOKEN"
		public Keyword getANMTOKENKeyword_31_0() { return cANMTOKENKeyword_31_0; }

		//aNMTOKEN=NMTOKEN
		public Assignment getANMTOKENAssignment_31_1() { return cANMTOKENAssignment_31_1; }

		//NMTOKEN
		public RuleCall getANMTOKENNMTOKENParserRuleCall_31_1_0() { return cANMTOKENNMTOKENParserRuleCall_31_1_0; }

		//("aNMTOKENS" aNMTOKENS=NMTOKENS)?
		public Group getGroup_32() { return cGroup_32; }

		//"aNMTOKENS"
		public Keyword getANMTOKENSKeyword_32_0() { return cANMTOKENSKeyword_32_0; }

		//aNMTOKENS=NMTOKENS
		public Assignment getANMTOKENSAssignment_32_1() { return cANMTOKENSAssignment_32_1; }

		//NMTOKENS
		public RuleCall getANMTOKENSNMTOKENSParserRuleCall_32_1_0() { return cANMTOKENSNMTOKENSParserRuleCall_32_1_0; }

		//("aNonNegativeInteger" aNonNegativeInteger=NonNegativeInteger)?
		public Group getGroup_33() { return cGroup_33; }

		//"aNonNegativeInteger"
		public Keyword getANonNegativeIntegerKeyword_33_0() { return cANonNegativeIntegerKeyword_33_0; }

		//aNonNegativeInteger=NonNegativeInteger
		public Assignment getANonNegativeIntegerAssignment_33_1() { return cANonNegativeIntegerAssignment_33_1; }

		//NonNegativeInteger
		public RuleCall getANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0() { return cANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0; }

		//("aNonPositiveInteger" aNonPositiveInteger=NonPositiveInteger)?
		public Group getGroup_34() { return cGroup_34; }

		//"aNonPositiveInteger"
		public Keyword getANonPositiveIntegerKeyword_34_0() { return cANonPositiveIntegerKeyword_34_0; }

		//aNonPositiveInteger=NonPositiveInteger
		public Assignment getANonPositiveIntegerAssignment_34_1() { return cANonPositiveIntegerAssignment_34_1; }

		//NonPositiveInteger
		public RuleCall getANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0() { return cANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0; }

		//("aPositiveInteger" aPositiveInteger=PositiveInteger)?
		public Group getGroup_35() { return cGroup_35; }

		//"aPositiveInteger"
		public Keyword getAPositiveIntegerKeyword_35_0() { return cAPositiveIntegerKeyword_35_0; }

		//aPositiveInteger=PositiveInteger
		public Assignment getAPositiveIntegerAssignment_35_1() { return cAPositiveIntegerAssignment_35_1; }

		//PositiveInteger
		public RuleCall getAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0() { return cAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0; }

		//("aQName" aQName=QName)?
		public Group getGroup_36() { return cGroup_36; }

		//"aQName"
		public Keyword getAQNameKeyword_36_0() { return cAQNameKeyword_36_0; }

		//aQName=QName
		public Assignment getAQNameAssignment_36_1() { return cAQNameAssignment_36_1; }

		//QName
		public RuleCall getAQNameQNameParserRuleCall_36_1_0() { return cAQNameQNameParserRuleCall_36_1_0; }

		//("aShort" aShort=Short)?
		public Group getGroup_37() { return cGroup_37; }

		//"aShort"
		public Keyword getAShortKeyword_37_0() { return cAShortKeyword_37_0; }

		//aShort=Short
		public Assignment getAShortAssignment_37_1() { return cAShortAssignment_37_1; }

		//Short
		public RuleCall getAShortShortParserRuleCall_37_1_0() { return cAShortShortParserRuleCall_37_1_0; }

		//("aString" aString=String0)?
		public Group getGroup_38() { return cGroup_38; }

		//"aString"
		public Keyword getAStringKeyword_38_0() { return cAStringKeyword_38_0; }

		//aString=String0
		public Assignment getAStringAssignment_38_1() { return cAStringAssignment_38_1; }

		//String0
		public RuleCall getAStringString0ParserRuleCall_38_1_0() { return cAStringString0ParserRuleCall_38_1_0; }

		//("aTime" aTime=Time)?
		public Group getGroup_39() { return cGroup_39; }

		//"aTime"
		public Keyword getATimeKeyword_39_0() { return cATimeKeyword_39_0; }

		//aTime=Time
		public Assignment getATimeAssignment_39_1() { return cATimeAssignment_39_1; }

		//Time
		public RuleCall getATimeTimeParserRuleCall_39_1_0() { return cATimeTimeParserRuleCall_39_1_0; }

		//("aToken" aToken=Token)?
		public Group getGroup_40() { return cGroup_40; }

		//"aToken"
		public Keyword getATokenKeyword_40_0() { return cATokenKeyword_40_0; }

		//aToken=Token
		public Assignment getATokenAssignment_40_1() { return cATokenAssignment_40_1; }

		//Token
		public RuleCall getATokenTokenParserRuleCall_40_1_0() { return cATokenTokenParserRuleCall_40_1_0; }

		//("aUnsignedByte" aUnsignedByte=UnsignedByte)?
		public Group getGroup_41() { return cGroup_41; }

		//"aUnsignedByte"
		public Keyword getAUnsignedByteKeyword_41_0() { return cAUnsignedByteKeyword_41_0; }

		//aUnsignedByte=UnsignedByte
		public Assignment getAUnsignedByteAssignment_41_1() { return cAUnsignedByteAssignment_41_1; }

		//UnsignedByte
		public RuleCall getAUnsignedByteUnsignedByteParserRuleCall_41_1_0() { return cAUnsignedByteUnsignedByteParserRuleCall_41_1_0; }

		//("aUnsignedInt" aUnsignedInt=UnsignedInt)?
		public Group getGroup_42() { return cGroup_42; }

		//"aUnsignedInt"
		public Keyword getAUnsignedIntKeyword_42_0() { return cAUnsignedIntKeyword_42_0; }

		//aUnsignedInt=UnsignedInt
		public Assignment getAUnsignedIntAssignment_42_1() { return cAUnsignedIntAssignment_42_1; }

		//UnsignedInt
		public RuleCall getAUnsignedIntUnsignedIntParserRuleCall_42_1_0() { return cAUnsignedIntUnsignedIntParserRuleCall_42_1_0; }

		//("aUnsignedLong" aUnsignedLong=UnsignedLong)?
		public Group getGroup_43() { return cGroup_43; }

		//"aUnsignedLong"
		public Keyword getAUnsignedLongKeyword_43_0() { return cAUnsignedLongKeyword_43_0; }

		//aUnsignedLong=UnsignedLong
		public Assignment getAUnsignedLongAssignment_43_1() { return cAUnsignedLongAssignment_43_1; }

		//UnsignedLong
		public RuleCall getAUnsignedLongUnsignedLongParserRuleCall_43_1_0() { return cAUnsignedLongUnsignedLongParserRuleCall_43_1_0; }

		//("aUnsignedShort" aUnsignedShort=UnsignedShort)?
		public Group getGroup_44() { return cGroup_44; }

		//"aUnsignedShort"
		public Keyword getAUnsignedShortKeyword_44_0() { return cAUnsignedShortKeyword_44_0; }

		//aUnsignedShort=UnsignedShort
		public Assignment getAUnsignedShortAssignment_44_1() { return cAUnsignedShortAssignment_44_1; }

		//UnsignedShort
		public RuleCall getAUnsignedShortUnsignedShortParserRuleCall_44_1_0() { return cAUnsignedShortUnsignedShortParserRuleCall_44_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_45() { return cRightCurlyBracketKeyword_45; }
	}

	public class AnySimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnySimpleType");
		private final Keyword cAnySimpleTypeKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
		//	"AnySimpleType";
		public ParserRule getRule() { return rule; }

		//"AnySimpleType"
		public Keyword getAnySimpleTypeKeyword() { return cAnySimpleTypeKeyword; }
	}

	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
		//	"AnyURI";
		public ParserRule getRule() { return rule; }

		//"AnyURI"
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}

	public class Base64BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Base64Binary");
		private final Keyword cBase64BinaryKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Base64Binary returns type::Base64Binary:
		//	"Base64Binary";
		public ParserRule getRule() { return rule; }

		//"Base64Binary"
		public Keyword getBase64BinaryKeyword() { return cBase64BinaryKeyword; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
		//	"Boolean";
		public ParserRule getRule() { return rule; }

		//"Boolean"
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}

	public class ByteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Byte");
		private final Keyword cByteKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Byte returns type::Byte:
		//	"Byte";
		public ParserRule getRule() { return rule; }

		//"Byte"
		public Keyword getByteKeyword() { return cByteKeyword; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Keyword cDateKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Date returns type::Date:
		//	"Date";
		public ParserRule getRule() { return rule; }

		//"Date"
		public Keyword getDateKeyword() { return cDateKeyword; }
	}

	public class DateTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTime");
		private final Keyword cDateTimeKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / DateTime returns type::DateTime:
		//	"DateTime";
		public ParserRule getRule() { return rule; }

		//"DateTime"
		public Keyword getDateTimeKeyword() { return cDateTimeKeyword; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Keyword cDecimalKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Decimal returns type::Decimal:
		//	"Decimal";
		public ParserRule getRule() { return rule; }

		//"Decimal"
		public Keyword getDecimalKeyword() { return cDecimalKeyword; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Double returns type::Double:
		//	"Double";
		public ParserRule getRule() { return rule; }

		//"Double"
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}

	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Duration");
		private final Keyword cDurationKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Duration returns type::Duration:
		//	"Duration";
		public ParserRule getRule() { return rule; }

		//"Duration"
		public Keyword getDurationKeyword() { return cDurationKeyword; }
	}

	public class ENTITIESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENTITIES");
		private final Keyword cENTITIESKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / ENTITIES returns type::ENTITIES:
		//	"ENTITIES";
		public ParserRule getRule() { return rule; }

		//"ENTITIES"
		public Keyword getENTITIESKeyword() { return cENTITIESKeyword; }
	}

	public class ENTITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENTITY");
		private final Keyword cENTITYKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / ENTITY returns type::ENTITY:
		//	"ENTITY";
		public ParserRule getRule() { return rule; }

		//"ENTITY"
		public Keyword getENTITYKeyword() { return cENTITYKeyword; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Keyword cFloatKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Float returns type::Float:
		//	"Float";
		public ParserRule getRule() { return rule; }

		//"Float"
		public Keyword getFloatKeyword() { return cFloatKeyword; }
	}

	public class GDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GDay");
		private final Keyword cGDayKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / GDay returns type::GDay:
		//	"GDay";
		public ParserRule getRule() { return rule; }

		//"GDay"
		public Keyword getGDayKeyword() { return cGDayKeyword; }
	}

	public class GMonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GMonth");
		private final Keyword cGMonthKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / GMonth returns type::GMonth:
		//	"GMonth";
		public ParserRule getRule() { return rule; }

		//"GMonth"
		public Keyword getGMonthKeyword() { return cGMonthKeyword; }
	}

	public class GMonthDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GMonthDay");
		private final Keyword cGMonthDayKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / GMonthDay returns type::GMonthDay:
		//	"GMonthDay";
		public ParserRule getRule() { return rule; }

		//"GMonthDay"
		public Keyword getGMonthDayKeyword() { return cGMonthDayKeyword; }
	}

	public class GYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GYear");
		private final Keyword cGYearKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / GYear returns type::GYear:
		//	"GYear";
		public ParserRule getRule() { return rule; }

		//"GYear"
		public Keyword getGYearKeyword() { return cGYearKeyword; }
	}

	public class GYearMonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GYearMonth");
		private final Keyword cGYearMonthKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / GYearMonth returns type::GYearMonth:
		//	"GYearMonth";
		public ParserRule getRule() { return rule; }

		//"GYearMonth"
		public Keyword getGYearMonthKeyword() { return cGYearMonthKeyword; }
	}

	public class HexBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexBinary");
		private final Keyword cHexBinaryKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / HexBinary returns type::HexBinary:
		//	"HexBinary";
		public ParserRule getRule() { return rule; }

		//"HexBinary"
		public Keyword getHexBinaryKeyword() { return cHexBinaryKeyword; }
	}

	public class ID0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID0");
		private final Keyword cIDKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / ID0 returns type::ID:
		//	"ID";
		public ParserRule getRule() { return rule; }

		//"ID"
		public Keyword getIDKeyword() { return cIDKeyword; }
	}

	public class IDREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDREF");
		private final Keyword cIDREFKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / IDREF returns type::IDREF:
		//	"IDREF";
		public ParserRule getRule() { return rule; }

		//"IDREF"
		public Keyword getIDREFKeyword() { return cIDREFKeyword; }
	}

	public class IDREFSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDREFS");
		private final Keyword cIDREFSKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / IDREFS returns type::IDREFS:
		//	"IDREFS";
		public ParserRule getRule() { return rule; }

		//"IDREFS"
		public Keyword getIDREFSKeyword() { return cIDREFSKeyword; }
	}

	public class Int0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Int0");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Int0 returns type::Int:
		//	"Int";
		public ParserRule getRule() { return rule; }

		//"Int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Keyword cIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns type::Integer:
		//	"Integer";
		public ParserRule getRule() { return rule; }

		//"Integer"
		public Keyword getIntegerKeyword() { return cIntegerKeyword; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Keyword cLanguageKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Language returns type::Language:
		//	"Language";
		public ParserRule getRule() { return rule; }

		//"Language"
		public Keyword getLanguageKeyword() { return cLanguageKeyword; }
	}

	public class LongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Long");
		private final Keyword cLongKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Long returns type::Long:
		//	"Long";
		public ParserRule getRule() { return rule; }

		//"Long"
		public Keyword getLongKeyword() { return cLongKeyword; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Keyword cNameKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Name returns type::Name:
		//	"Name";
		public ParserRule getRule() { return rule; }

		//"Name"
		public Keyword getNameKeyword() { return cNameKeyword; }
	}

	public class NCNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NCName");
		private final Keyword cNCNameKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / NCName returns type::NCName:
		//	"NCName";
		public ParserRule getRule() { return rule; }

		//"NCName"
		public Keyword getNCNameKeyword() { return cNCNameKeyword; }
	}

	public class NMTOKENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NMTOKEN");
		private final Keyword cNMTOKENKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / NMTOKEN returns type::NMTOKEN:
		//	"NMTOKEN";
		public ParserRule getRule() { return rule; }

		//"NMTOKEN"
		public Keyword getNMTOKENKeyword() { return cNMTOKENKeyword; }
	}

	public class NMTOKENSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NMTOKENS");
		private final Keyword cNMTOKENSKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / NMTOKENS returns type::NMTOKENS:
		//	"NMTOKENS";
		public ParserRule getRule() { return rule; }

		//"NMTOKENS"
		public Keyword getNMTOKENSKeyword() { return cNMTOKENSKeyword; }
	}

	public class NonNegativeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonNegativeInteger");
		private final Keyword cNonNegativeIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / NonNegativeInteger returns type::NonNegativeInteger:
		//	"NonNegativeInteger";
		public ParserRule getRule() { return rule; }

		//"NonNegativeInteger"
		public Keyword getNonNegativeIntegerKeyword() { return cNonNegativeIntegerKeyword; }
	}

	public class NonPositiveIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonPositiveInteger");
		private final Keyword cNonPositiveIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / NonPositiveInteger returns type::NonPositiveInteger:
		//	"NonPositiveInteger";
		public ParserRule getRule() { return rule; }

		//"NonPositiveInteger"
		public Keyword getNonPositiveIntegerKeyword() { return cNonPositiveIntegerKeyword; }
	}

	public class PositiveIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PositiveInteger");
		private final Keyword cPositiveIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / PositiveInteger returns type::PositiveInteger:
		//	"PositiveInteger";
		public ParserRule getRule() { return rule; }

		//"PositiveInteger"
		public Keyword getPositiveIntegerKeyword() { return cPositiveIntegerKeyword; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Keyword cQNameKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / QName returns type::QName:
		//	"QName";
		public ParserRule getRule() { return rule; }

		//"QName"
		public Keyword getQNameKeyword() { return cQNameKeyword; }
	}

	public class ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Short");
		private final Keyword cShortKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Short returns type::Short:
		//	"Short";
		public ParserRule getRule() { return rule; }

		//"Short"
		public Keyword getShortKeyword() { return cShortKeyword; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns type::String:
		//	"String";
		public ParserRule getRule() { return rule; }

		//"String"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}

	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Time");
		private final Keyword cTimeKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Time returns type::Time:
		//	"Time";
		public ParserRule getRule() { return rule; }

		//"Time"
		public Keyword getTimeKeyword() { return cTimeKeyword; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Keyword cTokenKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Token returns type::Token:
		//	"Token";
		public ParserRule getRule() { return rule; }

		//"Token"
		public Keyword getTokenKeyword() { return cTokenKeyword; }
	}

	public class UnsignedByteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedByte");
		private final Keyword cUnsignedByteKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedByte returns type::UnsignedByte:
		//	"UnsignedByte";
		public ParserRule getRule() { return rule; }

		//"UnsignedByte"
		public Keyword getUnsignedByteKeyword() { return cUnsignedByteKeyword; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedInt");
		private final Keyword cUnsignedIntKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedInt returns type::UnsignedInt:
		//	"UnsignedInt";
		public ParserRule getRule() { return rule; }

		//"UnsignedInt"
		public Keyword getUnsignedIntKeyword() { return cUnsignedIntKeyword; }
	}

	public class UnsignedLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedLong");
		private final Keyword cUnsignedLongKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedLong returns type::UnsignedLong:
		//	"UnsignedLong";
		public ParserRule getRule() { return rule; }

		//"UnsignedLong"
		public Keyword getUnsignedLongKeyword() { return cUnsignedLongKeyword; }
	}

	public class UnsignedShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedShort");
		private final Keyword cUnsignedShortKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedShort returns type::UnsignedShort:
		//	"UnsignedShort";
		public ParserRule getRule() { return rule; }

		//"UnsignedShort"
		public Keyword getUnsignedShortKeyword() { return cUnsignedShortKeyword; }
	}
	
	
	private final DataTypeTestElements pDataTypeTest;
	private final AnySimpleTypeElements pAnySimpleType;
	private final AnyURIElements pAnyURI;
	private final Base64BinaryElements pBase64Binary;
	private final BooleanElements pBoolean;
	private final ByteElements pByte;
	private final DateElements pDate;
	private final DateTimeElements pDateTime;
	private final DecimalElements pDecimal;
	private final DoubleElements pDouble;
	private final DurationElements pDuration;
	private final ENTITIESElements pENTITIES;
	private final ENTITYElements pENTITY;
	private final FloatElements pFloat;
	private final GDayElements pGDay;
	private final GMonthElements pGMonth;
	private final GMonthDayElements pGMonthDay;
	private final GYearElements pGYear;
	private final GYearMonthElements pGYearMonth;
	private final HexBinaryElements pHexBinary;
	private final ID0Elements pID0;
	private final IDREFElements pIDREF;
	private final IDREFSElements pIDREFS;
	private final Int0Elements pInt0;
	private final IntegerElements pInteger;
	private final LanguageElements pLanguage;
	private final LongElements pLong;
	private final NameElements pName;
	private final NCNameElements pNCName;
	private final NMTOKENElements pNMTOKEN;
	private final NMTOKENSElements pNMTOKENS;
	private final NonNegativeIntegerElements pNonNegativeInteger;
	private final NonPositiveIntegerElements pNonPositiveInteger;
	private final PositiveIntegerElements pPositiveInteger;
	private final QNameElements pQName;
	private final ShortElements pShort;
	private final String0Elements pString0;
	private final TimeElements pTime;
	private final TokenElements pToken;
	private final UnsignedByteElements pUnsignedByte;
	private final UnsignedIntElements pUnsignedInt;
	private final UnsignedLongElements pUnsignedLong;
	private final UnsignedShortElements pUnsignedShort;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataTypeTest = new DataTypeTestElements();
		this.pAnySimpleType = new AnySimpleTypeElements();
		this.pAnyURI = new AnyURIElements();
		this.pBase64Binary = new Base64BinaryElements();
		this.pBoolean = new BooleanElements();
		this.pByte = new ByteElements();
		this.pDate = new DateElements();
		this.pDateTime = new DateTimeElements();
		this.pDecimal = new DecimalElements();
		this.pDouble = new DoubleElements();
		this.pDuration = new DurationElements();
		this.pENTITIES = new ENTITIESElements();
		this.pENTITY = new ENTITYElements();
		this.pFloat = new FloatElements();
		this.pGDay = new GDayElements();
		this.pGMonth = new GMonthElements();
		this.pGMonthDay = new GMonthDayElements();
		this.pGYear = new GYearElements();
		this.pGYearMonth = new GYearMonthElements();
		this.pHexBinary = new HexBinaryElements();
		this.pID0 = new ID0Elements();
		this.pIDREF = new IDREFElements();
		this.pIDREFS = new IDREFSElements();
		this.pInt0 = new Int0Elements();
		this.pInteger = new IntegerElements();
		this.pLanguage = new LanguageElements();
		this.pLong = new LongElements();
		this.pName = new NameElements();
		this.pNCName = new NCNameElements();
		this.pNMTOKEN = new NMTOKENElements();
		this.pNMTOKENS = new NMTOKENSElements();
		this.pNonNegativeInteger = new NonNegativeIntegerElements();
		this.pNonPositiveInteger = new NonPositiveIntegerElements();
		this.pPositiveInteger = new PositiveIntegerElements();
		this.pQName = new QNameElements();
		this.pShort = new ShortElements();
		this.pString0 = new String0Elements();
		this.pTime = new TimeElements();
		this.pToken = new TokenElements();
		this.pUnsignedByte = new UnsignedByteElements();
		this.pUnsignedInt = new UnsignedIntElements();
		this.pUnsignedLong = new UnsignedLongElements();
		this.pUnsignedShort = new UnsignedShortElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.datatypes.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataTypeTest:
	//	{DataTypeTest} "DataTypeTest" aID=ID0 "{" ("aAnySimpleType" aAnySimpleType=AnySimpleType)? ("aAnyURI"
	//	aAnyURI=AnyURI)? ("aBase64Binary" aBase64Binary=Base64Binary)? ("aBoolean" aBoolean=Boolean)? ("aByte" aByte=Byte)?
	//	("aDate" aDate=Date)? ("aDateTime" aDateTime=DateTime)? ("aDecimal" aDecimal=Decimal)? ("aDouble" aDouble=Double)?
	//	("aDuration" aDuration=Duration)? ("aEntities" aEntities=ENTITIES)? ("aEntity" aEntity=ENTITY)? ("aFloat"
	//	aFloat=Float)? ("aGDay" aGDay=GDay)? ("aGMonth" aGMonth=GMonth)? ("aGMonthDay" aGMonthDay=GMonthDay)? ("aGYear"
	//	aGYear=GYear)? ("aGYearMonth" aGYearMonth=GYearMonth)? ("aHexBinary" aHexBinary=HexBinary)? ("aIDREF" aIDREF=IDREF)?
	//	("aIDREFS" aIDREFS=IDREFS)? ("aInt" aInt=Int0)? ("aInteger" aInteger=Integer)? ("aLanguage" aLanguage=Language)?
	//	("aLong" aLong=Long)? ("aName" aName=Name)? ("aNCName" aNCName=NCName)? ("aNMTOKEN" aNMTOKEN=NMTOKEN)? ("aNMTOKENS"
	//	aNMTOKENS=NMTOKENS)? ("aNonNegativeInteger" aNonNegativeInteger=NonNegativeInteger)? ("aNonPositiveInteger"
	//	aNonPositiveInteger=NonPositiveInteger)? ("aPositiveInteger" aPositiveInteger=PositiveInteger)? ("aQName"
	//	aQName=QName)? ("aShort" aShort=Short)? ("aString" aString=String0)? ("aTime" aTime=Time)? ("aToken" aToken=Token)?
	//	("aUnsignedByte" aUnsignedByte=UnsignedByte)? ("aUnsignedInt" aUnsignedInt=UnsignedInt)? ("aUnsignedLong"
	//	aUnsignedLong=UnsignedLong)? ("aUnsignedShort" aUnsignedShort=UnsignedShort)? "}";
	public DataTypeTestElements getDataTypeTestAccess() {
		return pDataTypeTest;
	}
	
	public ParserRule getDataTypeTestRule() {
		return getDataTypeTestAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
	//	"AnySimpleType";
	public AnySimpleTypeElements getAnySimpleTypeAccess() {
		return pAnySimpleType;
	}
	
	public ParserRule getAnySimpleTypeRule() {
		return getAnySimpleTypeAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
	//	"AnyURI";
	public AnyURIElements getAnyURIAccess() {
		return pAnyURI;
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Base64Binary returns type::Base64Binary:
	//	"Base64Binary";
	public Base64BinaryElements getBase64BinaryAccess() {
		return pBase64Binary;
	}
	
	public ParserRule getBase64BinaryRule() {
		return getBase64BinaryAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
	//	"Boolean";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Byte returns type::Byte:
	//	"Byte";
	public ByteElements getByteAccess() {
		return pByte;
	}
	
	public ParserRule getByteRule() {
		return getByteAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Date returns type::Date:
	//	"Date";
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / DateTime returns type::DateTime:
	//	"DateTime";
	public DateTimeElements getDateTimeAccess() {
		return pDateTime;
	}
	
	public ParserRule getDateTimeRule() {
		return getDateTimeAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Decimal returns type::Decimal:
	//	"Decimal";
	public DecimalElements getDecimalAccess() {
		return pDecimal;
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Double returns type::Double:
	//	"Double";
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Duration returns type::Duration:
	//	"Duration";
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / ENTITIES returns type::ENTITIES:
	//	"ENTITIES";
	public ENTITIESElements getENTITIESAccess() {
		return pENTITIES;
	}
	
	public ParserRule getENTITIESRule() {
		return getENTITIESAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / ENTITY returns type::ENTITY:
	//	"ENTITY";
	public ENTITYElements getENTITYAccess() {
		return pENTITY;
	}
	
	public ParserRule getENTITYRule() {
		return getENTITYAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Float returns type::Float:
	//	"Float";
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / GDay returns type::GDay:
	//	"GDay";
	public GDayElements getGDayAccess() {
		return pGDay;
	}
	
	public ParserRule getGDayRule() {
		return getGDayAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / GMonth returns type::GMonth:
	//	"GMonth";
	public GMonthElements getGMonthAccess() {
		return pGMonth;
	}
	
	public ParserRule getGMonthRule() {
		return getGMonthAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / GMonthDay returns type::GMonthDay:
	//	"GMonthDay";
	public GMonthDayElements getGMonthDayAccess() {
		return pGMonthDay;
	}
	
	public ParserRule getGMonthDayRule() {
		return getGMonthDayAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / GYear returns type::GYear:
	//	"GYear";
	public GYearElements getGYearAccess() {
		return pGYear;
	}
	
	public ParserRule getGYearRule() {
		return getGYearAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / GYearMonth returns type::GYearMonth:
	//	"GYearMonth";
	public GYearMonthElements getGYearMonthAccess() {
		return pGYearMonth;
	}
	
	public ParserRule getGYearMonthRule() {
		return getGYearMonthAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / HexBinary returns type::HexBinary:
	//	"HexBinary";
	public HexBinaryElements getHexBinaryAccess() {
		return pHexBinary;
	}
	
	public ParserRule getHexBinaryRule() {
		return getHexBinaryAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / ID0 returns type::ID:
	//	"ID";
	public ID0Elements getID0Access() {
		return pID0;
	}
	
	public ParserRule getID0Rule() {
		return getID0Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / IDREF returns type::IDREF:
	//	"IDREF";
	public IDREFElements getIDREFAccess() {
		return pIDREF;
	}
	
	public ParserRule getIDREFRule() {
		return getIDREFAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / IDREFS returns type::IDREFS:
	//	"IDREFS";
	public IDREFSElements getIDREFSAccess() {
		return pIDREFS;
	}
	
	public ParserRule getIDREFSRule() {
		return getIDREFSAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Int0 returns type::Int:
	//	"Int";
	public Int0Elements getInt0Access() {
		return pInt0;
	}
	
	public ParserRule getInt0Rule() {
		return getInt0Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns type::Integer:
	//	"Integer";
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Language returns type::Language:
	//	"Language";
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Long returns type::Long:
	//	"Long";
	public LongElements getLongAccess() {
		return pLong;
	}
	
	public ParserRule getLongRule() {
		return getLongAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Name returns type::Name:
	//	"Name";
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / NCName returns type::NCName:
	//	"NCName";
	public NCNameElements getNCNameAccess() {
		return pNCName;
	}
	
	public ParserRule getNCNameRule() {
		return getNCNameAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / NMTOKEN returns type::NMTOKEN:
	//	"NMTOKEN";
	public NMTOKENElements getNMTOKENAccess() {
		return pNMTOKEN;
	}
	
	public ParserRule getNMTOKENRule() {
		return getNMTOKENAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / NMTOKENS returns type::NMTOKENS:
	//	"NMTOKENS";
	public NMTOKENSElements getNMTOKENSAccess() {
		return pNMTOKENS;
	}
	
	public ParserRule getNMTOKENSRule() {
		return getNMTOKENSAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / NonNegativeInteger returns type::NonNegativeInteger:
	//	"NonNegativeInteger";
	public NonNegativeIntegerElements getNonNegativeIntegerAccess() {
		return pNonNegativeInteger;
	}
	
	public ParserRule getNonNegativeIntegerRule() {
		return getNonNegativeIntegerAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / NonPositiveInteger returns type::NonPositiveInteger:
	//	"NonPositiveInteger";
	public NonPositiveIntegerElements getNonPositiveIntegerAccess() {
		return pNonPositiveInteger;
	}
	
	public ParserRule getNonPositiveIntegerRule() {
		return getNonPositiveIntegerAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / PositiveInteger returns type::PositiveInteger:
	//	"PositiveInteger";
	public PositiveIntegerElements getPositiveIntegerAccess() {
		return pPositiveInteger;
	}
	
	public ParserRule getPositiveIntegerRule() {
		return getPositiveIntegerAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / QName returns type::QName:
	//	"QName";
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Short returns type::Short:
	//	"Short";
	public ShortElements getShortAccess() {
		return pShort;
	}
	
	public ParserRule getShortRule() {
		return getShortAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns type::String:
	//	"String";
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Time returns type::Time:
	//	"Time";
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Token returns type::Token:
	//	"Token";
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedByte returns type::UnsignedByte:
	//	"UnsignedByte";
	public UnsignedByteElements getUnsignedByteAccess() {
		return pUnsignedByte;
	}
	
	public ParserRule getUnsignedByteRule() {
		return getUnsignedByteAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedInt returns type::UnsignedInt:
	//	"UnsignedInt";
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedLong returns type::UnsignedLong:
	//	"UnsignedLong";
	public UnsignedLongElements getUnsignedLongAccess() {
		return pUnsignedLong;
	}
	
	public ParserRule getUnsignedLongRule() {
		return getUnsignedLongAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / UnsignedShort returns type::UnsignedShort:
	//	"UnsignedShort";
	public UnsignedShortElements getUnsignedShortAccess() {
		return pUnsignedShort;
	}
	
	public ParserRule getUnsignedShortRule() {
		return getUnsignedShortAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
