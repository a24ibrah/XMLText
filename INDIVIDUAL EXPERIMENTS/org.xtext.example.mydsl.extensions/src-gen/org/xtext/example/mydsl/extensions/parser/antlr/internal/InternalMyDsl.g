/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.extensions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.extensions.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.extensions.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RootElementType";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRootElementType
entryRuleRootElementType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootElementTypeRule()); }
	 iv_ruleRootElementType=ruleRootElementType 
	 { $current=$iv_ruleRootElementType.current; } 
	 EOF 
;

// Rule RootElementType
ruleRootElementType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RootElementType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootElementTypeAccess().getRootElementTypeKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRootElementTypeAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='extendedAddress' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRootElementTypeAccess().getExtendedAddressKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementTypeAccess().getExtendedAddressExtendedAddressParserRuleCall_3_0()); 
	    }
		lv_extendedAddress_3_0=ruleExtendedAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementTypeRule());
	        }
       		set(
       			$current, 
       			"extendedAddress",
        		lv_extendedAddress_3_0, 
        		"ExtendedAddress");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='address' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRootElementTypeAccess().getAddressKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementTypeAccess().getAddressAddressParserRuleCall_5_0()); 
	    }
		lv_address_5_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementTypeRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_5_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='language' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRootElementTypeAccess().getLanguageKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementTypeAccess().getLanguageLanguageParserRuleCall_7_0()); 
	    }
		lv_language_7_0=ruleLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementTypeRule());
	        }
       		set(
       			$current, 
       			"language",
        		lv_language_7_0, 
        		"Language");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRootElementTypeAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleAddress
entryRuleAddress returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddressRule()); }
	 iv_ruleAddress=ruleAddress 
	 { $current=$iv_ruleAddress.current; } 
	 EOF 
;

// Rule Address
ruleAddress returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddressAccess().getAddress_ImplParserRuleCall_0()); 
    }
    this_Address_Impl_0=ruleAddress_Impl
    { 
        $current = $this_Address_Impl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAddressAccess().getExtendedAddressParserRuleCall_1()); 
    }
    this_ExtendedAddress_1=ruleExtendedAddress
    { 
        $current = $this_ExtendedAddress_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExtendedAddress
entryRuleExtendedAddress returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedAddressRule()); }
	 iv_ruleExtendedAddress=ruleExtendedAddress 
	 { $current=$iv_ruleExtendedAddress.current; } 
	 EOF 
;

// Rule ExtendedAddress
ruleExtendedAddress returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ExtendedAddress' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtendedAddressAccess().getExtendedAddressKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExtendedAddressAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='street' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendedAddressAccess().getStreetKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedAddressAccess().getStreetString0ParserRuleCall_3_0()); 
	    }
		lv_street_3_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedAddressRule());
	        }
       		set(
       			$current, 
       			"street",
        		lv_street_3_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='city' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtendedAddressAccess().getCityKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedAddressAccess().getCityString0ParserRuleCall_5_0()); 
	    }
		lv_city_5_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedAddressRule());
	        }
       		set(
       			$current, 
       			"city",
        		lv_city_5_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='country' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExtendedAddressAccess().getCountryKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedAddressAccess().getCountryString0ParserRuleCall_7_0()); 
	    }
		lv_country_7_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedAddressRule());
	        }
       		set(
       			$current, 
       			"country",
        		lv_country_7_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='latitude' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExtendedAddressAccess().getLatitudeKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedAddressAccess().getLatitudeDecimalParserRuleCall_8_1_0()); 
	    }
		lv_latitude_9_0=ruleDecimal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedAddressRule());
	        }
       		set(
       			$current, 
       			"latitude",
        		lv_latitude_9_0, 
        		"Decimal");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='longitude' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExtendedAddressAccess().getLongitudeKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedAddressAccess().getLongitudeDecimalParserRuleCall_9_1_0()); 
	    }
		lv_longitude_11_0=ruleDecimal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedAddressRule());
	        }
       		set(
       			$current, 
       			"longitude",
        		lv_longitude_11_0, 
        		"Decimal");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExtendedAddressAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleAddress_Impl
entryRuleAddress_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddress_ImplRule()); }
	 iv_ruleAddress_Impl=ruleAddress_Impl 
	 { $current=$iv_ruleAddress_Impl.current; } 
	 EOF 
;

// Rule Address_Impl
ruleAddress_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Address' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAddress_ImplAccess().getAddressKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAddress_ImplAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='street' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAddress_ImplAccess().getStreetKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddress_ImplAccess().getStreetString0ParserRuleCall_3_0()); 
	    }
		lv_street_3_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddress_ImplRule());
	        }
       		set(
       			$current, 
       			"street",
        		lv_street_3_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='city' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAddress_ImplAccess().getCityKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddress_ImplAccess().getCityString0ParserRuleCall_5_0()); 
	    }
		lv_city_5_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddress_ImplRule());
	        }
       		set(
       			$current, 
       			"city",
        		lv_city_5_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='country' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAddress_ImplAccess().getCountryKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddress_ImplAccess().getCountryString0ParserRuleCall_7_0()); 
	    }
		lv_country_7_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddress_ImplRule());
	        }
       		set(
       			$current, 
       			"country",
        		lv_country_7_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAddress_ImplAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleLanguage
entryRuleLanguage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageRule()); }
	 iv_ruleLanguage=ruleLanguage 
	 { $current=$iv_ruleLanguage.current; } 
	 EOF 
;

// Rule Language
ruleLanguage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLanguageAccess().getLanguageAction_0(),
            $current);
    }
)	otherlv_1='Language' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLanguageAccess().getLanguageKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLanguageAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='value' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLanguageAccess().getValueKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageAccess().getValueString0ParserRuleCall_3_1_0()); 
	    }
		lv_value_4_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='language' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLanguageAccess().getLanguageKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageAccess().getLanguageLanguage0ParserRuleCall_4_1_0()); 
	    }
		lv_language_6_0=ruleLanguage0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageRule());
	        }
       		set(
       			$current, 
       			"language",
        		lv_language_6_0, 
        		"Language0");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLanguageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getString0Access().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDecimal
entryRuleDecimal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalRule()); } 
	 iv_ruleDecimal=ruleDecimal 
	 { $current=$iv_ruleDecimal.current.getText(); }  
	 EOF 
;

// Rule Decimal
ruleDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleLanguage0
entryRuleLanguage0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguage0Rule()); } 
	 iv_ruleLanguage0=ruleLanguage0 
	 { $current=$iv_ruleLanguage0.current.getText(); }  
	 EOF 
;

// Rule Language0
ruleLanguage0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getLanguage0Access().getSTRINGTerminalRuleCall()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


