/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.anyfeature.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.anyfeature.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.anyfeature.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RootElementType";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRootElementType
entryRuleRootElementType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootElementTypeRule()); }
	 iv_ruleRootElementType=ruleRootElementType 
	 { $current=$iv_ruleRootElementType.current; } 
	 EOF 
;

// Rule RootElementType
ruleRootElementType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RootElementType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootElementTypeAccess().getRootElementTypeKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRootElementTypeAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='element1' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRootElementTypeAccess().getElement1Keyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementTypeAccess().getElement1Element1ParserRuleCall_3_0()); 
	    }
		lv_element1_3_0=ruleElement1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementTypeRule());
	        }
       		set(
       			$current, 
       			"element1",
        		lv_element1_3_0, 
        		"Element1");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='properties' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRootElementTypeAccess().getPropertiesKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementTypeAccess().getPropertiesPropertiesParserRuleCall_4_1_0()); 
	    }
		lv_properties_5_0=ruleProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementTypeRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"Properties");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRootElementTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleElement1
entryRuleElement1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElement1Rule()); }
	 iv_ruleElement1=ruleElement1 
	 { $current=$iv_ruleElement1.current; } 
	 EOF 
;

// Rule Element1
ruleElement1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElement1Access().getElement1Action_0(),
            $current);
    }
)	otherlv_1='Element1' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElement1Access().getElement1Keyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElement1Access().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='city' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElement1Access().getCityKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElement1Access().getCityString0ParserRuleCall_3_1_0()); 
	    }
		lv_city_4_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement1Rule());
	        }
       		set(
       			$current, 
       			"city",
        		lv_city_4_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='street' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getElement1Access().getStreetKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElement1Access().getStreetString0ParserRuleCall_4_1_0()); 
	    }
		lv_street_6_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement1Rule());
	        }
       		set(
       			$current, 
       			"street",
        		lv_street_6_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getElement1Access().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	 iv_ruleProperties=ruleProperties 
	 { $current=$iv_ruleProperties.current; } 
	 EOF 
;

// Rule Properties
ruleProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertiesAccess().getPropertiesAction_0(),
            $current);
    }
)	otherlv_1='Properties' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertiesAccess().getPropertiesKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertiesAccess().getAnyEFeatureMapEntryParserRuleCall_2_0()); 
	    }
		lv_any_2_0=ruleEFeatureMapEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertiesRule());
	        }
       		add(
       			$current, 
       			"any",
        		lv_any_2_0, 
        		"EFeatureMapEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEFeatureMapEntry
entryRuleEFeatureMapEntry returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFeatureMapEntryRule()); } 
	 iv_ruleEFeatureMapEntry=ruleEFeatureMapEntry 
	 { $current=$iv_ruleEFeatureMapEntry.current.getText(); }  
	 EOF 
;

// Rule EFeatureMapEntry
ruleEFeatureMapEntry returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEFeatureMapEntryAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getString0Access().getSTRINGTerminalRuleCall()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


