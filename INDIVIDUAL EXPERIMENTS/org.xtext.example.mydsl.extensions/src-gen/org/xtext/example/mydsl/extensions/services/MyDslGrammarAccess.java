/*
* generated by Xtext
*/
package org.xtext.example.mydsl.extensions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootElementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtendedAddressKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtendedAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtendedAddressExtendedAddressParserRuleCall_3_0 = (RuleCall)cExtendedAddressAssignment_3.eContents().get(0);
		private final Keyword cAddressKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAddressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddressAddressParserRuleCall_5_0 = (RuleCall)cAddressAssignment_5.eContents().get(0);
		private final Keyword cLanguageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLanguageAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLanguageLanguageParserRuleCall_7_0 = (RuleCall)cLanguageAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RootElementType:
		//	"RootElementType" "{" "extendedAddress" extendedAddress=ExtendedAddress "address" address=Address "language"
		//	language=Language "}";
		public ParserRule getRule() { return rule; }

		//"RootElementType" "{" "extendedAddress" extendedAddress=ExtendedAddress "address" address=Address "language"
		//language=Language "}"
		public Group getGroup() { return cGroup; }

		//"RootElementType"
		public Keyword getRootElementTypeKeyword_0() { return cRootElementTypeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"extendedAddress"
		public Keyword getExtendedAddressKeyword_2() { return cExtendedAddressKeyword_2; }

		//extendedAddress=ExtendedAddress
		public Assignment getExtendedAddressAssignment_3() { return cExtendedAddressAssignment_3; }

		//ExtendedAddress
		public RuleCall getExtendedAddressExtendedAddressParserRuleCall_3_0() { return cExtendedAddressExtendedAddressParserRuleCall_3_0; }

		//"address"
		public Keyword getAddressKeyword_4() { return cAddressKeyword_4; }

		//address=Address
		public Assignment getAddressAssignment_5() { return cAddressAssignment_5; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_5_0() { return cAddressAddressParserRuleCall_5_0; }

		//"language"
		public Keyword getLanguageKeyword_6() { return cLanguageKeyword_6; }

		//language=Language
		public Assignment getLanguageAssignment_7() { return cLanguageAssignment_7; }

		//Language
		public RuleCall getLanguageLanguageParserRuleCall_7_0() { return cLanguageLanguageParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Address");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddress_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtendedAddressParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Address:
		//	Address_Impl | ExtendedAddress;
		public ParserRule getRule() { return rule; }

		//Address_Impl | ExtendedAddress
		public Alternatives getAlternatives() { return cAlternatives; }

		//Address_Impl
		public RuleCall getAddress_ImplParserRuleCall_0() { return cAddress_ImplParserRuleCall_0; }

		//ExtendedAddress
		public RuleCall getExtendedAddressParserRuleCall_1() { return cExtendedAddressParserRuleCall_1; }
	}

	public class ExtendedAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendedAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendedAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStreetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStreetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStreetString0ParserRuleCall_3_0 = (RuleCall)cStreetAssignment_3.eContents().get(0);
		private final Keyword cCityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCityString0ParserRuleCall_5_0 = (RuleCall)cCityAssignment_5.eContents().get(0);
		private final Keyword cCountryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCountryAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCountryString0ParserRuleCall_7_0 = (RuleCall)cCountryAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLatitudeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLatitudeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLatitudeDecimalParserRuleCall_8_1_0 = (RuleCall)cLatitudeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLongitudeKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cLongitudeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cLongitudeDecimalParserRuleCall_9_1_0 = (RuleCall)cLongitudeAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ExtendedAddress:
		//	"ExtendedAddress" "{" "street" street=String0 "city" city=String0 "country" country=String0 ("latitude"
		//	latitude=Decimal)? ("longitude" longitude=Decimal)? "}";
		public ParserRule getRule() { return rule; }

		//"ExtendedAddress" "{" "street" street=String0 "city" city=String0 "country" country=String0 ("latitude"
		//latitude=Decimal)? ("longitude" longitude=Decimal)? "}"
		public Group getGroup() { return cGroup; }

		//"ExtendedAddress"
		public Keyword getExtendedAddressKeyword_0() { return cExtendedAddressKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"street"
		public Keyword getStreetKeyword_2() { return cStreetKeyword_2; }

		//street=String0
		public Assignment getStreetAssignment_3() { return cStreetAssignment_3; }

		//String0
		public RuleCall getStreetString0ParserRuleCall_3_0() { return cStreetString0ParserRuleCall_3_0; }

		//"city"
		public Keyword getCityKeyword_4() { return cCityKeyword_4; }

		//city=String0
		public Assignment getCityAssignment_5() { return cCityAssignment_5; }

		//String0
		public RuleCall getCityString0ParserRuleCall_5_0() { return cCityString0ParserRuleCall_5_0; }

		//"country"
		public Keyword getCountryKeyword_6() { return cCountryKeyword_6; }

		//country=String0
		public Assignment getCountryAssignment_7() { return cCountryAssignment_7; }

		//String0
		public RuleCall getCountryString0ParserRuleCall_7_0() { return cCountryString0ParserRuleCall_7_0; }

		//("latitude" latitude=Decimal)?
		public Group getGroup_8() { return cGroup_8; }

		//"latitude"
		public Keyword getLatitudeKeyword_8_0() { return cLatitudeKeyword_8_0; }

		//latitude=Decimal
		public Assignment getLatitudeAssignment_8_1() { return cLatitudeAssignment_8_1; }

		//Decimal
		public RuleCall getLatitudeDecimalParserRuleCall_8_1_0() { return cLatitudeDecimalParserRuleCall_8_1_0; }

		//("longitude" longitude=Decimal)?
		public Group getGroup_9() { return cGroup_9; }

		//"longitude"
		public Keyword getLongitudeKeyword_9_0() { return cLongitudeKeyword_9_0; }

		//longitude=Decimal
		public Assignment getLongitudeAssignment_9_1() { return cLongitudeAssignment_9_1; }

		//Decimal
		public RuleCall getLongitudeDecimalParserRuleCall_9_1_0() { return cLongitudeDecimalParserRuleCall_9_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class Address_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Address_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStreetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStreetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStreetString0ParserRuleCall_3_0 = (RuleCall)cStreetAssignment_3.eContents().get(0);
		private final Keyword cCityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCityString0ParserRuleCall_5_0 = (RuleCall)cCityAssignment_5.eContents().get(0);
		private final Keyword cCountryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCountryAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCountryString0ParserRuleCall_7_0 = (RuleCall)cCountryAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Address_Impl returns Address:
		//	"Address" "{" "street" street=String0 "city" city=String0 "country" country=String0 "}";
		public ParserRule getRule() { return rule; }

		//"Address" "{" "street" street=String0 "city" city=String0 "country" country=String0 "}"
		public Group getGroup() { return cGroup; }

		//"Address"
		public Keyword getAddressKeyword_0() { return cAddressKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"street"
		public Keyword getStreetKeyword_2() { return cStreetKeyword_2; }

		//street=String0
		public Assignment getStreetAssignment_3() { return cStreetAssignment_3; }

		//String0
		public RuleCall getStreetString0ParserRuleCall_3_0() { return cStreetString0ParserRuleCall_3_0; }

		//"city"
		public Keyword getCityKeyword_4() { return cCityKeyword_4; }

		//city=String0
		public Assignment getCityAssignment_5() { return cCityAssignment_5; }

		//String0
		public RuleCall getCityString0ParserRuleCall_5_0() { return cCityString0ParserRuleCall_5_0; }

		//"country"
		public Keyword getCountryKeyword_6() { return cCountryKeyword_6; }

		//country=String0
		public Assignment getCountryAssignment_7() { return cCountryAssignment_7; }

		//String0
		public RuleCall getCountryString0ParserRuleCall_7_0() { return cCountryString0ParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueString0ParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLanguageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLanguageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLanguageLanguage0ParserRuleCall_4_1_0 = (RuleCall)cLanguageAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Language:
		//	{Language} "Language" "{" ("value" value=String0)? ("language" language=Language0)? "}";
		public ParserRule getRule() { return rule; }

		//{Language} "Language" "{" ("value" value=String0)? ("language" language=Language0)? "}"
		public Group getGroup() { return cGroup; }

		//{Language}
		public Action getLanguageAction_0() { return cLanguageAction_0; }

		//"Language"
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("value" value=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"value"
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }

		//value=String0
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//String0
		public RuleCall getValueString0ParserRuleCall_3_1_0() { return cValueString0ParserRuleCall_3_1_0; }

		//("language" language=Language0)?
		public Group getGroup_4() { return cGroup_4; }

		//"language"
		public Keyword getLanguageKeyword_4_0() { return cLanguageKeyword_4_0; }

		//language=Language0
		public Assignment getLanguageAssignment_4_1() { return cLanguageAssignment_4_1; }

		//Language0
		public RuleCall getLanguageLanguage0ParserRuleCall_4_1_0() { return cLanguageLanguage0ParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//String0 returns type::String: //	'String' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//	STRING;
		public ParserRule getRule() { return rule; }

		////	'String' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Decimal returns type::Decimal: //	'Decimal' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		////	'Decimal' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//INT "." INT
		public Group getGroup() { return cGroup; }

		////	'Decimal' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class Language0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language0");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Language0 returns type::Language: //	'Language' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//	STRING;
		public ParserRule getRule() { return rule; }

		////	'Language' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final RootElementTypeElements pRootElementType;
	private final AddressElements pAddress;
	private final ExtendedAddressElements pExtendedAddress;
	private final Address_ImplElements pAddress_Impl;
	private final LanguageElements pLanguage;
	private final String0Elements pString0;
	private final DecimalElements pDecimal;
	private final Language0Elements pLanguage0;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRootElementType = new RootElementTypeElements();
		this.pAddress = new AddressElements();
		this.pExtendedAddress = new ExtendedAddressElements();
		this.pAddress_Impl = new Address_ImplElements();
		this.pLanguage = new LanguageElements();
		this.pString0 = new String0Elements();
		this.pDecimal = new DecimalElements();
		this.pLanguage0 = new Language0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.extensions.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RootElementType:
	//	"RootElementType" "{" "extendedAddress" extendedAddress=ExtendedAddress "address" address=Address "language"
	//	language=Language "}";
	public RootElementTypeElements getRootElementTypeAccess() {
		return pRootElementType;
	}
	
	public ParserRule getRootElementTypeRule() {
		return getRootElementTypeAccess().getRule();
	}

	//Address:
	//	Address_Impl | ExtendedAddress;
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}

	//ExtendedAddress:
	//	"ExtendedAddress" "{" "street" street=String0 "city" city=String0 "country" country=String0 ("latitude"
	//	latitude=Decimal)? ("longitude" longitude=Decimal)? "}";
	public ExtendedAddressElements getExtendedAddressAccess() {
		return pExtendedAddress;
	}
	
	public ParserRule getExtendedAddressRule() {
		return getExtendedAddressAccess().getRule();
	}

	//Address_Impl returns Address:
	//	"Address" "{" "street" street=String0 "city" city=String0 "country" country=String0 "}";
	public Address_ImplElements getAddress_ImplAccess() {
		return pAddress_Impl;
	}
	
	public ParserRule getAddress_ImplRule() {
		return getAddress_ImplAccess().getRule();
	}

	//Language:
	//	{Language} "Language" "{" ("value" value=String0)? ("language" language=Language0)? "}";
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//String0 returns type::String: //	'String' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//	STRING;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//Decimal returns type::Decimal: //	'Decimal' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//	INT "." INT;
	public DecimalElements getDecimalAccess() {
		return pDecimal;
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//Language0 returns type::Language: //	'Language' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//	STRING;
	public Language0Elements getLanguage0Access() {
		return pLanguage0;
	}
	
	public ParserRule getLanguage0Rule() {
		return getLanguage0Access().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
