/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.datatypes.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.datatypes.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.datatypes.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDataTypeTest
entryRuleDataTypeTest 
:
{ before(grammarAccess.getDataTypeTestRule()); }
	 ruleDataTypeTest
{ after(grammarAccess.getDataTypeTestRule()); } 
	 EOF 
;

// Rule DataTypeTest
ruleDataTypeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup()); }
(rule__DataTypeTest__Group__0)
{ after(grammarAccess.getDataTypeTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnySimpleType
entryRuleAnySimpleType 
:
{ before(grammarAccess.getAnySimpleTypeRule()); }
	 ruleAnySimpleType
{ after(grammarAccess.getAnySimpleTypeRule()); } 
	 EOF 
;

// Rule AnySimpleType
ruleAnySimpleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnySimpleTypeAccess().getAnySimpleTypeKeyword()); }

	'AnySimpleType' 

{ after(grammarAccess.getAnySimpleTypeAccess().getAnySimpleTypeKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnyURI
entryRuleAnyURI 
:
{ before(grammarAccess.getAnyURIRule()); }
	 ruleAnyURI
{ after(grammarAccess.getAnyURIRule()); } 
	 EOF 
;

// Rule AnyURI
ruleAnyURI
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyURIAccess().getAnyURIKeyword()); }

	'AnyURI' 

{ after(grammarAccess.getAnyURIAccess().getAnyURIKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBase64Binary
entryRuleBase64Binary 
:
{ before(grammarAccess.getBase64BinaryRule()); }
	 ruleBase64Binary
{ after(grammarAccess.getBase64BinaryRule()); } 
	 EOF 
;

// Rule Base64Binary
ruleBase64Binary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBase64BinaryAccess().getBase64BinaryKeyword()); }

	'Base64Binary' 

{ after(grammarAccess.getBase64BinaryAccess().getBase64BinaryKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanAccess().getBooleanKeyword()); }

	'Boolean' 

{ after(grammarAccess.getBooleanAccess().getBooleanKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleByte
entryRuleByte 
:
{ before(grammarAccess.getByteRule()); }
	 ruleByte
{ after(grammarAccess.getByteRule()); } 
	 EOF 
;

// Rule Byte
ruleByte
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getByteAccess().getByteKeyword()); }

	'Byte' 

{ after(grammarAccess.getByteAccess().getByteKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDate
entryRuleDate 
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateAccess().getDateKeyword()); }

	'Date' 

{ after(grammarAccess.getDateAccess().getDateKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTime
entryRuleDateTime 
:
{ before(grammarAccess.getDateTimeRule()); }
	 ruleDateTime
{ after(grammarAccess.getDateTimeRule()); } 
	 EOF 
;

// Rule DateTime
ruleDateTime
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeAccess().getDateTimeKeyword()); }

	'DateTime' 

{ after(grammarAccess.getDateTimeAccess().getDateTimeKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimal
entryRuleDecimal 
:
{ before(grammarAccess.getDecimalRule()); }
	 ruleDecimal
{ after(grammarAccess.getDecimalRule()); } 
	 EOF 
;

// Rule Decimal
ruleDecimal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalAccess().getDecimalKeyword()); }

	'Decimal' 

{ after(grammarAccess.getDecimalAccess().getDecimalKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDouble
entryRuleDouble 
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleAccess().getDoubleKeyword()); }

	'Double' 

{ after(grammarAccess.getDoubleAccess().getDoubleKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDuration
entryRuleDuration 
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDurationAccess().getDurationKeyword()); }

	'Duration' 

{ after(grammarAccess.getDurationAccess().getDurationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleENTITIES
entryRuleENTITIES 
:
{ before(grammarAccess.getENTITIESRule()); }
	 ruleENTITIES
{ after(grammarAccess.getENTITIESRule()); } 
	 EOF 
;

// Rule ENTITIES
ruleENTITIES
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getENTITIESAccess().getENTITIESKeyword()); }

	'ENTITIES' 

{ after(grammarAccess.getENTITIESAccess().getENTITIESKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleENTITY
entryRuleENTITY 
:
{ before(grammarAccess.getENTITYRule()); }
	 ruleENTITY
{ after(grammarAccess.getENTITYRule()); } 
	 EOF 
;

// Rule ENTITY
ruleENTITY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getENTITYAccess().getENTITYKeyword()); }

	'ENTITY' 

{ after(grammarAccess.getENTITYAccess().getENTITYKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloat
entryRuleFloat 
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatAccess().getFloatKeyword()); }

	'Float' 

{ after(grammarAccess.getFloatAccess().getFloatKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGDay
entryRuleGDay 
:
{ before(grammarAccess.getGDayRule()); }
	 ruleGDay
{ after(grammarAccess.getGDayRule()); } 
	 EOF 
;

// Rule GDay
ruleGDay
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGDayAccess().getGDayKeyword()); }

	'GDay' 

{ after(grammarAccess.getGDayAccess().getGDayKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGMonth
entryRuleGMonth 
:
{ before(grammarAccess.getGMonthRule()); }
	 ruleGMonth
{ after(grammarAccess.getGMonthRule()); } 
	 EOF 
;

// Rule GMonth
ruleGMonth
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGMonthAccess().getGMonthKeyword()); }

	'GMonth' 

{ after(grammarAccess.getGMonthAccess().getGMonthKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGMonthDay
entryRuleGMonthDay 
:
{ before(grammarAccess.getGMonthDayRule()); }
	 ruleGMonthDay
{ after(grammarAccess.getGMonthDayRule()); } 
	 EOF 
;

// Rule GMonthDay
ruleGMonthDay
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGMonthDayAccess().getGMonthDayKeyword()); }

	'GMonthDay' 

{ after(grammarAccess.getGMonthDayAccess().getGMonthDayKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGYear
entryRuleGYear 
:
{ before(grammarAccess.getGYearRule()); }
	 ruleGYear
{ after(grammarAccess.getGYearRule()); } 
	 EOF 
;

// Rule GYear
ruleGYear
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGYearAccess().getGYearKeyword()); }

	'GYear' 

{ after(grammarAccess.getGYearAccess().getGYearKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGYearMonth
entryRuleGYearMonth 
:
{ before(grammarAccess.getGYearMonthRule()); }
	 ruleGYearMonth
{ after(grammarAccess.getGYearMonthRule()); } 
	 EOF 
;

// Rule GYearMonth
ruleGYearMonth
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGYearMonthAccess().getGYearMonthKeyword()); }

	'GYearMonth' 

{ after(grammarAccess.getGYearMonthAccess().getGYearMonthKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHexBinary
entryRuleHexBinary 
:
{ before(grammarAccess.getHexBinaryRule()); }
	 ruleHexBinary
{ after(grammarAccess.getHexBinaryRule()); } 
	 EOF 
;

// Rule HexBinary
ruleHexBinary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHexBinaryAccess().getHexBinaryKeyword()); }

	'HexBinary' 

{ after(grammarAccess.getHexBinaryAccess().getHexBinaryKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleID0
entryRuleID0 
:
{ before(grammarAccess.getID0Rule()); }
	 ruleID0
{ after(grammarAccess.getID0Rule()); } 
	 EOF 
;

// Rule ID0
ruleID0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getID0Access().getIDKeyword()); }

	'ID' 

{ after(grammarAccess.getID0Access().getIDKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIDREF
entryRuleIDREF 
:
{ before(grammarAccess.getIDREFRule()); }
	 ruleIDREF
{ after(grammarAccess.getIDREFRule()); } 
	 EOF 
;

// Rule IDREF
ruleIDREF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDREFAccess().getIDREFKeyword()); }

	'IDREF' 

{ after(grammarAccess.getIDREFAccess().getIDREFKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIDREFS
entryRuleIDREFS 
:
{ before(grammarAccess.getIDREFSRule()); }
	 ruleIDREFS
{ after(grammarAccess.getIDREFSRule()); } 
	 EOF 
;

// Rule IDREFS
ruleIDREFS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDREFSAccess().getIDREFSKeyword()); }

	'IDREFS' 

{ after(grammarAccess.getIDREFSAccess().getIDREFSKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInt0
entryRuleInt0 
:
{ before(grammarAccess.getInt0Rule()); }
	 ruleInt0
{ after(grammarAccess.getInt0Rule()); } 
	 EOF 
;

// Rule Int0
ruleInt0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInt0Access().getIntKeyword()); }

	'Int' 

{ after(grammarAccess.getInt0Access().getIntKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getIntegerKeyword()); }

	'Integer' 

{ after(grammarAccess.getIntegerAccess().getIntegerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLanguage
entryRuleLanguage 
:
{ before(grammarAccess.getLanguageRule()); }
	 ruleLanguage
{ after(grammarAccess.getLanguageRule()); } 
	 EOF 
;

// Rule Language
ruleLanguage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLanguageAccess().getLanguageKeyword()); }

	'Language' 

{ after(grammarAccess.getLanguageAccess().getLanguageKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLong
entryRuleLong 
:
{ before(grammarAccess.getLongRule()); }
	 ruleLong
{ after(grammarAccess.getLongRule()); } 
	 EOF 
;

// Rule Long
ruleLong
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongAccess().getLongKeyword()); }

	'Long' 

{ after(grammarAccess.getLongAccess().getLongKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getNameKeyword()); }

	'Name' 

{ after(grammarAccess.getNameAccess().getNameKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNCName
entryRuleNCName 
:
{ before(grammarAccess.getNCNameRule()); }
	 ruleNCName
{ after(grammarAccess.getNCNameRule()); } 
	 EOF 
;

// Rule NCName
ruleNCName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNCNameAccess().getNCNameKeyword()); }

	'NCName' 

{ after(grammarAccess.getNCNameAccess().getNCNameKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNMTOKEN
entryRuleNMTOKEN 
:
{ before(grammarAccess.getNMTOKENRule()); }
	 ruleNMTOKEN
{ after(grammarAccess.getNMTOKENRule()); } 
	 EOF 
;

// Rule NMTOKEN
ruleNMTOKEN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNMTOKENAccess().getNMTOKENKeyword()); }

	'NMTOKEN' 

{ after(grammarAccess.getNMTOKENAccess().getNMTOKENKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNMTOKENS
entryRuleNMTOKENS 
:
{ before(grammarAccess.getNMTOKENSRule()); }
	 ruleNMTOKENS
{ after(grammarAccess.getNMTOKENSRule()); } 
	 EOF 
;

// Rule NMTOKENS
ruleNMTOKENS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNMTOKENSAccess().getNMTOKENSKeyword()); }

	'NMTOKENS' 

{ after(grammarAccess.getNMTOKENSAccess().getNMTOKENSKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonNegativeInteger
entryRuleNonNegativeInteger 
:
{ before(grammarAccess.getNonNegativeIntegerRule()); }
	 ruleNonNegativeInteger
{ after(grammarAccess.getNonNegativeIntegerRule()); } 
	 EOF 
;

// Rule NonNegativeInteger
ruleNonNegativeInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonNegativeIntegerAccess().getNonNegativeIntegerKeyword()); }

	'NonNegativeInteger' 

{ after(grammarAccess.getNonNegativeIntegerAccess().getNonNegativeIntegerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonPositiveInteger
entryRuleNonPositiveInteger 
:
{ before(grammarAccess.getNonPositiveIntegerRule()); }
	 ruleNonPositiveInteger
{ after(grammarAccess.getNonPositiveIntegerRule()); } 
	 EOF 
;

// Rule NonPositiveInteger
ruleNonPositiveInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonPositiveIntegerAccess().getNonPositiveIntegerKeyword()); }

	'NonPositiveInteger' 

{ after(grammarAccess.getNonPositiveIntegerAccess().getNonPositiveIntegerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePositiveInteger
entryRulePositiveInteger 
:
{ before(grammarAccess.getPositiveIntegerRule()); }
	 rulePositiveInteger
{ after(grammarAccess.getPositiveIntegerRule()); } 
	 EOF 
;

// Rule PositiveInteger
rulePositiveInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPositiveIntegerAccess().getPositiveIntegerKeyword()); }

	'PositiveInteger' 

{ after(grammarAccess.getPositiveIntegerAccess().getPositiveIntegerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQName
entryRuleQName 
:
{ before(grammarAccess.getQNameRule()); }
	 ruleQName
{ after(grammarAccess.getQNameRule()); } 
	 EOF 
;

// Rule QName
ruleQName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQNameAccess().getQNameKeyword()); }

	'QName' 

{ after(grammarAccess.getQNameAccess().getQNameKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShort
entryRuleShort 
:
{ before(grammarAccess.getShortRule()); }
	 ruleShort
{ after(grammarAccess.getShortRule()); } 
	 EOF 
;

// Rule Short
ruleShort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShortAccess().getShortKeyword()); }

	'Short' 

{ after(grammarAccess.getShortAccess().getShortKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleString0
entryRuleString0 
:
{ before(grammarAccess.getString0Rule()); }
	 ruleString0
{ after(grammarAccess.getString0Rule()); } 
	 EOF 
;

// Rule String0
ruleString0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getString0Access().getStringKeyword()); }

	'String' 

{ after(grammarAccess.getString0Access().getStringKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTime
entryRuleTime 
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeAccess().getTimeKeyword()); }

	'Time' 

{ after(grammarAccess.getTimeAccess().getTimeKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleToken
entryRuleToken 
:
{ before(grammarAccess.getTokenRule()); }
	 ruleToken
{ after(grammarAccess.getTokenRule()); } 
	 EOF 
;

// Rule Token
ruleToken
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTokenAccess().getTokenKeyword()); }

	'Token' 

{ after(grammarAccess.getTokenAccess().getTokenKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsignedByte
entryRuleUnsignedByte 
:
{ before(grammarAccess.getUnsignedByteRule()); }
	 ruleUnsignedByte
{ after(grammarAccess.getUnsignedByteRule()); } 
	 EOF 
;

// Rule UnsignedByte
ruleUnsignedByte
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsignedByteAccess().getUnsignedByteKeyword()); }

	'UnsignedByte' 

{ after(grammarAccess.getUnsignedByteAccess().getUnsignedByteKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt 
:
{ before(grammarAccess.getUnsignedIntRule()); }
	 ruleUnsignedInt
{ after(grammarAccess.getUnsignedIntRule()); } 
	 EOF 
;

// Rule UnsignedInt
ruleUnsignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsignedIntAccess().getUnsignedIntKeyword()); }

	'UnsignedInt' 

{ after(grammarAccess.getUnsignedIntAccess().getUnsignedIntKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsignedLong
entryRuleUnsignedLong 
:
{ before(grammarAccess.getUnsignedLongRule()); }
	 ruleUnsignedLong
{ after(grammarAccess.getUnsignedLongRule()); } 
	 EOF 
;

// Rule UnsignedLong
ruleUnsignedLong
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsignedLongAccess().getUnsignedLongKeyword()); }

	'UnsignedLong' 

{ after(grammarAccess.getUnsignedLongAccess().getUnsignedLongKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsignedShort
entryRuleUnsignedShort 
:
{ before(grammarAccess.getUnsignedShortRule()); }
	 ruleUnsignedShort
{ after(grammarAccess.getUnsignedShortRule()); } 
	 EOF 
;

// Rule UnsignedShort
ruleUnsignedShort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsignedShortAccess().getUnsignedShortKeyword()); }

	'UnsignedShort' 

{ after(grammarAccess.getUnsignedShortAccess().getUnsignedShortKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__0__Impl
	rule__DataTypeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getDataTypeTestAction_0()); }
(

)
{ after(grammarAccess.getDataTypeTestAccess().getDataTypeTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__1__Impl
	rule__DataTypeTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getDataTypeTestKeyword_1()); }

	'DataTypeTest' 

{ after(grammarAccess.getDataTypeTestAccess().getDataTypeTestKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__2__Impl
	rule__DataTypeTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDAssignment_2()); }
(rule__DataTypeTest__AIDAssignment_2)
{ after(grammarAccess.getDataTypeTestAccess().getAIDAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__3__Impl
	rule__DataTypeTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getDataTypeTestAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__4__Impl
	rule__DataTypeTest__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_4()); }
(rule__DataTypeTest__Group_4__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__5__Impl
	rule__DataTypeTest__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_5()); }
(rule__DataTypeTest__Group_5__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__6__Impl
	rule__DataTypeTest__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_6()); }
(rule__DataTypeTest__Group_6__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__7__Impl
	rule__DataTypeTest__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_7()); }
(rule__DataTypeTest__Group_7__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__8__Impl
	rule__DataTypeTest__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_8()); }
(rule__DataTypeTest__Group_8__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__9__Impl
	rule__DataTypeTest__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_9()); }
(rule__DataTypeTest__Group_9__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__10__Impl
	rule__DataTypeTest__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_10()); }
(rule__DataTypeTest__Group_10__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__11__Impl
	rule__DataTypeTest__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_11()); }
(rule__DataTypeTest__Group_11__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__12__Impl
	rule__DataTypeTest__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_12()); }
(rule__DataTypeTest__Group_12__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__13__Impl
	rule__DataTypeTest__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_13()); }
(rule__DataTypeTest__Group_13__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__14__Impl
	rule__DataTypeTest__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_14()); }
(rule__DataTypeTest__Group_14__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__15__Impl
	rule__DataTypeTest__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_15()); }
(rule__DataTypeTest__Group_15__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__16__Impl
	rule__DataTypeTest__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_16()); }
(rule__DataTypeTest__Group_16__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__17__Impl
	rule__DataTypeTest__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_17()); }
(rule__DataTypeTest__Group_17__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__18
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__18__Impl
	rule__DataTypeTest__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__18__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_18()); }
(rule__DataTypeTest__Group_18__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__19
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__19__Impl
	rule__DataTypeTest__Group__20
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__19__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_19()); }
(rule__DataTypeTest__Group_19__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__20
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__20__Impl
	rule__DataTypeTest__Group__21
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__20__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_20()); }
(rule__DataTypeTest__Group_20__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_20()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__21
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__21__Impl
	rule__DataTypeTest__Group__22
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__21__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_21()); }
(rule__DataTypeTest__Group_21__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_21()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__22
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__22__Impl
	rule__DataTypeTest__Group__23
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__22__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_22()); }
(rule__DataTypeTest__Group_22__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_22()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__23
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__23__Impl
	rule__DataTypeTest__Group__24
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__23__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_23()); }
(rule__DataTypeTest__Group_23__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_23()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__24
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__24__Impl
	rule__DataTypeTest__Group__25
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__24__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_24()); }
(rule__DataTypeTest__Group_24__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_24()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__25
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__25__Impl
	rule__DataTypeTest__Group__26
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__25__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_25()); }
(rule__DataTypeTest__Group_25__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_25()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__26
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__26__Impl
	rule__DataTypeTest__Group__27
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__26__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_26()); }
(rule__DataTypeTest__Group_26__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_26()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__27
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__27__Impl
	rule__DataTypeTest__Group__28
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__27__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_27()); }
(rule__DataTypeTest__Group_27__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_27()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__28
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__28__Impl
	rule__DataTypeTest__Group__29
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__28__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_28()); }
(rule__DataTypeTest__Group_28__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_28()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__29
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__29__Impl
	rule__DataTypeTest__Group__30
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__29__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_29()); }
(rule__DataTypeTest__Group_29__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_29()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__30
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__30__Impl
	rule__DataTypeTest__Group__31
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__30__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_30()); }
(rule__DataTypeTest__Group_30__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_30()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__31
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__31__Impl
	rule__DataTypeTest__Group__32
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__31__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_31()); }
(rule__DataTypeTest__Group_31__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_31()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__32
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__32__Impl
	rule__DataTypeTest__Group__33
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__32__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_32()); }
(rule__DataTypeTest__Group_32__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_32()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__33
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__33__Impl
	rule__DataTypeTest__Group__34
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__33__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_33()); }
(rule__DataTypeTest__Group_33__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_33()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__34
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__34__Impl
	rule__DataTypeTest__Group__35
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__34__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_34()); }
(rule__DataTypeTest__Group_34__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_34()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__35
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__35__Impl
	rule__DataTypeTest__Group__36
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__35__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_35()); }
(rule__DataTypeTest__Group_35__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_35()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__36
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__36__Impl
	rule__DataTypeTest__Group__37
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__36__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_36()); }
(rule__DataTypeTest__Group_36__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_36()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__37
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__37__Impl
	rule__DataTypeTest__Group__38
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__37__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_37()); }
(rule__DataTypeTest__Group_37__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_37()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__38
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__38__Impl
	rule__DataTypeTest__Group__39
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__38__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_38()); }
(rule__DataTypeTest__Group_38__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_38()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__39
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__39__Impl
	rule__DataTypeTest__Group__40
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__39__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_39()); }
(rule__DataTypeTest__Group_39__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_39()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__40
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__40__Impl
	rule__DataTypeTest__Group__41
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__40__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_40()); }
(rule__DataTypeTest__Group_40__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_40()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__41
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__41__Impl
	rule__DataTypeTest__Group__42
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__41__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_41()); }
(rule__DataTypeTest__Group_41__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_41()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__42
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__42__Impl
	rule__DataTypeTest__Group__43
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__42__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_42()); }
(rule__DataTypeTest__Group_42__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_42()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__43
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__43__Impl
	rule__DataTypeTest__Group__44
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__43__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_43()); }
(rule__DataTypeTest__Group_43__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_43()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__44
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__44__Impl
	rule__DataTypeTest__Group__45
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__44__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getGroup_44()); }
(rule__DataTypeTest__Group_44__0)?
{ after(grammarAccess.getDataTypeTestAccess().getGroup_44()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group__45
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group__45__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group__45__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getRightCurlyBracketKeyword_45()); }

	'}' 

{ after(grammarAccess.getDataTypeTestAccess().getRightCurlyBracketKeyword_45()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























































































rule__DataTypeTest__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_4__0__Impl
	rule__DataTypeTest__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeKeyword_4_0()); }

	'aAnySimpleType' 

{ after(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeAssignment_4_1()); }
(rule__DataTypeTest__AAnySimpleTypeAssignment_4_1)
{ after(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_5__0__Impl
	rule__DataTypeTest__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnyURIKeyword_5_0()); }

	'aAnyURI' 

{ after(grammarAccess.getDataTypeTestAccess().getAAnyURIKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnyURIAssignment_5_1()); }
(rule__DataTypeTest__AAnyURIAssignment_5_1)
{ after(grammarAccess.getDataTypeTestAccess().getAAnyURIAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_6__0__Impl
	rule__DataTypeTest__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABase64BinaryKeyword_6_0()); }

	'aBase64Binary' 

{ after(grammarAccess.getDataTypeTestAccess().getABase64BinaryKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABase64BinaryAssignment_6_1()); }
(rule__DataTypeTest__ABase64BinaryAssignment_6_1)
{ after(grammarAccess.getDataTypeTestAccess().getABase64BinaryAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_7__0__Impl
	rule__DataTypeTest__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABooleanKeyword_7_0()); }

	'aBoolean' 

{ after(grammarAccess.getDataTypeTestAccess().getABooleanKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABooleanAssignment_7_1()); }
(rule__DataTypeTest__ABooleanAssignment_7_1)
{ after(grammarAccess.getDataTypeTestAccess().getABooleanAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_8__0__Impl
	rule__DataTypeTest__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAByteKeyword_8_0()); }

	'aByte' 

{ after(grammarAccess.getDataTypeTestAccess().getAByteKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAByteAssignment_8_1()); }
(rule__DataTypeTest__AByteAssignment_8_1)
{ after(grammarAccess.getDataTypeTestAccess().getAByteAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_9__0__Impl
	rule__DataTypeTest__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateKeyword_9_0()); }

	'aDate' 

{ after(grammarAccess.getDataTypeTestAccess().getADateKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateAssignment_9_1()); }
(rule__DataTypeTest__ADateAssignment_9_1)
{ after(grammarAccess.getDataTypeTestAccess().getADateAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_10__0__Impl
	rule__DataTypeTest__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateTimeKeyword_10_0()); }

	'aDateTime' 

{ after(grammarAccess.getDataTypeTestAccess().getADateTimeKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateTimeAssignment_10_1()); }
(rule__DataTypeTest__ADateTimeAssignment_10_1)
{ after(grammarAccess.getDataTypeTestAccess().getADateTimeAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_11__0__Impl
	rule__DataTypeTest__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADecimalKeyword_11_0()); }

	'aDecimal' 

{ after(grammarAccess.getDataTypeTestAccess().getADecimalKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADecimalAssignment_11_1()); }
(rule__DataTypeTest__ADecimalAssignment_11_1)
{ after(grammarAccess.getDataTypeTestAccess().getADecimalAssignment_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_12__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_12__0__Impl
	rule__DataTypeTest__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_12__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADoubleKeyword_12_0()); }

	'aDouble' 

{ after(grammarAccess.getDataTypeTestAccess().getADoubleKeyword_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_12__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_12__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_12__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADoubleAssignment_12_1()); }
(rule__DataTypeTest__ADoubleAssignment_12_1)
{ after(grammarAccess.getDataTypeTestAccess().getADoubleAssignment_12_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_13__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_13__0__Impl
	rule__DataTypeTest__Group_13__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_13__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADurationKeyword_13_0()); }

	'aDuration' 

{ after(grammarAccess.getDataTypeTestAccess().getADurationKeyword_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_13__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_13__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_13__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADurationAssignment_13_1()); }
(rule__DataTypeTest__ADurationAssignment_13_1)
{ after(grammarAccess.getDataTypeTestAccess().getADurationAssignment_13_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_14__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_14__0__Impl
	rule__DataTypeTest__Group_14__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_14__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntitiesKeyword_14_0()); }

	'aEntities' 

{ after(grammarAccess.getDataTypeTestAccess().getAEntitiesKeyword_14_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_14__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_14__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_14__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntitiesAssignment_14_1()); }
(rule__DataTypeTest__AEntitiesAssignment_14_1)
{ after(grammarAccess.getDataTypeTestAccess().getAEntitiesAssignment_14_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_15__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_15__0__Impl
	rule__DataTypeTest__Group_15__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_15__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntityKeyword_15_0()); }

	'aEntity' 

{ after(grammarAccess.getDataTypeTestAccess().getAEntityKeyword_15_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_15__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_15__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_15__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntityAssignment_15_1()); }
(rule__DataTypeTest__AEntityAssignment_15_1)
{ after(grammarAccess.getDataTypeTestAccess().getAEntityAssignment_15_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_16__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_16__0__Impl
	rule__DataTypeTest__Group_16__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_16__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAFloatKeyword_16_0()); }

	'aFloat' 

{ after(grammarAccess.getDataTypeTestAccess().getAFloatKeyword_16_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_16__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_16__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_16__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAFloatAssignment_16_1()); }
(rule__DataTypeTest__AFloatAssignment_16_1)
{ after(grammarAccess.getDataTypeTestAccess().getAFloatAssignment_16_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_17__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_17__0__Impl
	rule__DataTypeTest__Group_17__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_17__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGDayKeyword_17_0()); }

	'aGDay' 

{ after(grammarAccess.getDataTypeTestAccess().getAGDayKeyword_17_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_17__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_17__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_17__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGDayAssignment_17_1()); }
(rule__DataTypeTest__AGDayAssignment_17_1)
{ after(grammarAccess.getDataTypeTestAccess().getAGDayAssignment_17_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_18__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_18__0__Impl
	rule__DataTypeTest__Group_18__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_18__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthKeyword_18_0()); }

	'aGMonth' 

{ after(grammarAccess.getDataTypeTestAccess().getAGMonthKeyword_18_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_18__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_18__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_18__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthAssignment_18_1()); }
(rule__DataTypeTest__AGMonthAssignment_18_1)
{ after(grammarAccess.getDataTypeTestAccess().getAGMonthAssignment_18_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_19__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_19__0__Impl
	rule__DataTypeTest__Group_19__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_19__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthDayKeyword_19_0()); }

	'aGMonthDay' 

{ after(grammarAccess.getDataTypeTestAccess().getAGMonthDayKeyword_19_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_19__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_19__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_19__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthDayAssignment_19_1()); }
(rule__DataTypeTest__AGMonthDayAssignment_19_1)
{ after(grammarAccess.getDataTypeTestAccess().getAGMonthDayAssignment_19_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_20__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_20__0__Impl
	rule__DataTypeTest__Group_20__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_20__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearKeyword_20_0()); }

	'aGYear' 

{ after(grammarAccess.getDataTypeTestAccess().getAGYearKeyword_20_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_20__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_20__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_20__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearAssignment_20_1()); }
(rule__DataTypeTest__AGYearAssignment_20_1)
{ after(grammarAccess.getDataTypeTestAccess().getAGYearAssignment_20_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_21__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_21__0__Impl
	rule__DataTypeTest__Group_21__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_21__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearMonthKeyword_21_0()); }

	'aGYearMonth' 

{ after(grammarAccess.getDataTypeTestAccess().getAGYearMonthKeyword_21_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_21__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_21__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_21__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearMonthAssignment_21_1()); }
(rule__DataTypeTest__AGYearMonthAssignment_21_1)
{ after(grammarAccess.getDataTypeTestAccess().getAGYearMonthAssignment_21_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_22__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_22__0__Impl
	rule__DataTypeTest__Group_22__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_22__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAHexBinaryKeyword_22_0()); }

	'aHexBinary' 

{ after(grammarAccess.getDataTypeTestAccess().getAHexBinaryKeyword_22_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_22__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_22__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_22__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAHexBinaryAssignment_22_1()); }
(rule__DataTypeTest__AHexBinaryAssignment_22_1)
{ after(grammarAccess.getDataTypeTestAccess().getAHexBinaryAssignment_22_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_23__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_23__0__Impl
	rule__DataTypeTest__Group_23__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_23__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFKeyword_23_0()); }

	'aIDREF' 

{ after(grammarAccess.getDataTypeTestAccess().getAIDREFKeyword_23_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_23__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_23__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_23__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFAssignment_23_1()); }
(rule__DataTypeTest__AIDREFAssignment_23_1)
{ after(grammarAccess.getDataTypeTestAccess().getAIDREFAssignment_23_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_24__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_24__0__Impl
	rule__DataTypeTest__Group_24__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_24__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFSKeyword_24_0()); }

	'aIDREFS' 

{ after(grammarAccess.getDataTypeTestAccess().getAIDREFSKeyword_24_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_24__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_24__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_24__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFSAssignment_24_1()); }
(rule__DataTypeTest__AIDREFSAssignment_24_1)
{ after(grammarAccess.getDataTypeTestAccess().getAIDREFSAssignment_24_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_25__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_25__0__Impl
	rule__DataTypeTest__Group_25__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_25__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntKeyword_25_0()); }

	'aInt' 

{ after(grammarAccess.getDataTypeTestAccess().getAIntKeyword_25_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_25__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_25__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_25__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntAssignment_25_1()); }
(rule__DataTypeTest__AIntAssignment_25_1)
{ after(grammarAccess.getDataTypeTestAccess().getAIntAssignment_25_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_26__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_26__0__Impl
	rule__DataTypeTest__Group_26__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_26__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntegerKeyword_26_0()); }

	'aInteger' 

{ after(grammarAccess.getDataTypeTestAccess().getAIntegerKeyword_26_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_26__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_26__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_26__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntegerAssignment_26_1()); }
(rule__DataTypeTest__AIntegerAssignment_26_1)
{ after(grammarAccess.getDataTypeTestAccess().getAIntegerAssignment_26_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_27__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_27__0__Impl
	rule__DataTypeTest__Group_27__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_27__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALanguageKeyword_27_0()); }

	'aLanguage' 

{ after(grammarAccess.getDataTypeTestAccess().getALanguageKeyword_27_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_27__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_27__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_27__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALanguageAssignment_27_1()); }
(rule__DataTypeTest__ALanguageAssignment_27_1)
{ after(grammarAccess.getDataTypeTestAccess().getALanguageAssignment_27_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_28__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_28__0__Impl
	rule__DataTypeTest__Group_28__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_28__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALongKeyword_28_0()); }

	'aLong' 

{ after(grammarAccess.getDataTypeTestAccess().getALongKeyword_28_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_28__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_28__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_28__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALongAssignment_28_1()); }
(rule__DataTypeTest__ALongAssignment_28_1)
{ after(grammarAccess.getDataTypeTestAccess().getALongAssignment_28_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_29__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_29__0__Impl
	rule__DataTypeTest__Group_29__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_29__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANameKeyword_29_0()); }

	'aName' 

{ after(grammarAccess.getDataTypeTestAccess().getANameKeyword_29_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_29__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_29__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_29__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANameAssignment_29_1()); }
(rule__DataTypeTest__ANameAssignment_29_1)
{ after(grammarAccess.getDataTypeTestAccess().getANameAssignment_29_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_30__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_30__0__Impl
	rule__DataTypeTest__Group_30__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_30__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANCNameKeyword_30_0()); }

	'aNCName' 

{ after(grammarAccess.getDataTypeTestAccess().getANCNameKeyword_30_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_30__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_30__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_30__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANCNameAssignment_30_1()); }
(rule__DataTypeTest__ANCNameAssignment_30_1)
{ after(grammarAccess.getDataTypeTestAccess().getANCNameAssignment_30_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_31__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_31__0__Impl
	rule__DataTypeTest__Group_31__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_31__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENKeyword_31_0()); }

	'aNMTOKEN' 

{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENKeyword_31_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_31__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_31__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_31__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENAssignment_31_1()); }
(rule__DataTypeTest__ANMTOKENAssignment_31_1)
{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENAssignment_31_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_32__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_32__0__Impl
	rule__DataTypeTest__Group_32__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_32__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENSKeyword_32_0()); }

	'aNMTOKENS' 

{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENSKeyword_32_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_32__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_32__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_32__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENSAssignment_32_1()); }
(rule__DataTypeTest__ANMTOKENSAssignment_32_1)
{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENSAssignment_32_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_33__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_33__0__Impl
	rule__DataTypeTest__Group_33__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_33__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerKeyword_33_0()); }

	'aNonNegativeInteger' 

{ after(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerKeyword_33_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_33__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_33__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_33__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerAssignment_33_1()); }
(rule__DataTypeTest__ANonNegativeIntegerAssignment_33_1)
{ after(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerAssignment_33_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_34__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_34__0__Impl
	rule__DataTypeTest__Group_34__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_34__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerKeyword_34_0()); }

	'aNonPositiveInteger' 

{ after(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerKeyword_34_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_34__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_34__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_34__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerAssignment_34_1()); }
(rule__DataTypeTest__ANonPositiveIntegerAssignment_34_1)
{ after(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerAssignment_34_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_35__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_35__0__Impl
	rule__DataTypeTest__Group_35__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_35__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerKeyword_35_0()); }

	'aPositiveInteger' 

{ after(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerKeyword_35_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_35__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_35__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_35__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerAssignment_35_1()); }
(rule__DataTypeTest__APositiveIntegerAssignment_35_1)
{ after(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerAssignment_35_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_36__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_36__0__Impl
	rule__DataTypeTest__Group_36__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_36__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAQNameKeyword_36_0()); }

	'aQName' 

{ after(grammarAccess.getDataTypeTestAccess().getAQNameKeyword_36_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_36__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_36__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_36__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAQNameAssignment_36_1()); }
(rule__DataTypeTest__AQNameAssignment_36_1)
{ after(grammarAccess.getDataTypeTestAccess().getAQNameAssignment_36_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_37__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_37__0__Impl
	rule__DataTypeTest__Group_37__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_37__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAShortKeyword_37_0()); }

	'aShort' 

{ after(grammarAccess.getDataTypeTestAccess().getAShortKeyword_37_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_37__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_37__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_37__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAShortAssignment_37_1()); }
(rule__DataTypeTest__AShortAssignment_37_1)
{ after(grammarAccess.getDataTypeTestAccess().getAShortAssignment_37_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_38__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_38__0__Impl
	rule__DataTypeTest__Group_38__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_38__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAStringKeyword_38_0()); }

	'aString' 

{ after(grammarAccess.getDataTypeTestAccess().getAStringKeyword_38_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_38__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_38__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_38__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAStringAssignment_38_1()); }
(rule__DataTypeTest__AStringAssignment_38_1)
{ after(grammarAccess.getDataTypeTestAccess().getAStringAssignment_38_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_39__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_39__0__Impl
	rule__DataTypeTest__Group_39__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_39__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATimeKeyword_39_0()); }

	'aTime' 

{ after(grammarAccess.getDataTypeTestAccess().getATimeKeyword_39_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_39__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_39__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_39__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATimeAssignment_39_1()); }
(rule__DataTypeTest__ATimeAssignment_39_1)
{ after(grammarAccess.getDataTypeTestAccess().getATimeAssignment_39_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_40__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_40__0__Impl
	rule__DataTypeTest__Group_40__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_40__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATokenKeyword_40_0()); }

	'aToken' 

{ after(grammarAccess.getDataTypeTestAccess().getATokenKeyword_40_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_40__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_40__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_40__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATokenAssignment_40_1()); }
(rule__DataTypeTest__ATokenAssignment_40_1)
{ after(grammarAccess.getDataTypeTestAccess().getATokenAssignment_40_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_41__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_41__0__Impl
	rule__DataTypeTest__Group_41__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_41__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedByteKeyword_41_0()); }

	'aUnsignedByte' 

{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedByteKeyword_41_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_41__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_41__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_41__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedByteAssignment_41_1()); }
(rule__DataTypeTest__AUnsignedByteAssignment_41_1)
{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedByteAssignment_41_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_42__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_42__0__Impl
	rule__DataTypeTest__Group_42__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_42__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedIntKeyword_42_0()); }

	'aUnsignedInt' 

{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedIntKeyword_42_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_42__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_42__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_42__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedIntAssignment_42_1()); }
(rule__DataTypeTest__AUnsignedIntAssignment_42_1)
{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedIntAssignment_42_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_43__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_43__0__Impl
	rule__DataTypeTest__Group_43__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_43__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedLongKeyword_43_0()); }

	'aUnsignedLong' 

{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedLongKeyword_43_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_43__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_43__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_43__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedLongAssignment_43_1()); }
(rule__DataTypeTest__AUnsignedLongAssignment_43_1)
{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedLongAssignment_43_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeTest__Group_44__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_44__0__Impl
	rule__DataTypeTest__Group_44__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_44__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedShortKeyword_44_0()); }

	'aUnsignedShort' 

{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedShortKeyword_44_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeTest__Group_44__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeTest__Group_44__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__Group_44__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedShortAssignment_44_1()); }
(rule__DataTypeTest__AUnsignedShortAssignment_44_1)
{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedShortAssignment_44_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DataTypeTest__AIDAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDID0ParserRuleCall_2_0()); }
	ruleID0{ after(grammarAccess.getDataTypeTestAccess().getAIDID0ParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AAnySimpleTypeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0()); }
	ruleAnySimpleType{ after(grammarAccess.getDataTypeTestAccess().getAAnySimpleTypeAnySimpleTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AAnyURIAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAAnyURIAnyURIParserRuleCall_5_1_0()); }
	ruleAnyURI{ after(grammarAccess.getDataTypeTestAccess().getAAnyURIAnyURIParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ABase64BinaryAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABase64BinaryBase64BinaryParserRuleCall_6_1_0()); }
	ruleBase64Binary{ after(grammarAccess.getDataTypeTestAccess().getABase64BinaryBase64BinaryParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ABooleanAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getABooleanBooleanParserRuleCall_7_1_0()); }
	ruleBoolean{ after(grammarAccess.getDataTypeTestAccess().getABooleanBooleanParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AByteAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAByteByteParserRuleCall_8_1_0()); }
	ruleByte{ after(grammarAccess.getDataTypeTestAccess().getAByteByteParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ADateAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateDateParserRuleCall_9_1_0()); }
	ruleDate{ after(grammarAccess.getDataTypeTestAccess().getADateDateParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ADateTimeAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADateTimeDateTimeParserRuleCall_10_1_0()); }
	ruleDateTime{ after(grammarAccess.getDataTypeTestAccess().getADateTimeDateTimeParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ADecimalAssignment_11_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADecimalDecimalParserRuleCall_11_1_0()); }
	ruleDecimal{ after(grammarAccess.getDataTypeTestAccess().getADecimalDecimalParserRuleCall_11_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ADoubleAssignment_12_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADoubleDoubleParserRuleCall_12_1_0()); }
	ruleDouble{ after(grammarAccess.getDataTypeTestAccess().getADoubleDoubleParserRuleCall_12_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ADurationAssignment_13_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getADurationDurationParserRuleCall_13_1_0()); }
	ruleDuration{ after(grammarAccess.getDataTypeTestAccess().getADurationDurationParserRuleCall_13_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AEntitiesAssignment_14_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntitiesENTITIESParserRuleCall_14_1_0()); }
	ruleENTITIES{ after(grammarAccess.getDataTypeTestAccess().getAEntitiesENTITIESParserRuleCall_14_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AEntityAssignment_15_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAEntityENTITYParserRuleCall_15_1_0()); }
	ruleENTITY{ after(grammarAccess.getDataTypeTestAccess().getAEntityENTITYParserRuleCall_15_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AFloatAssignment_16_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAFloatFloatParserRuleCall_16_1_0()); }
	ruleFloat{ after(grammarAccess.getDataTypeTestAccess().getAFloatFloatParserRuleCall_16_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AGDayAssignment_17_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGDayGDayParserRuleCall_17_1_0()); }
	ruleGDay{ after(grammarAccess.getDataTypeTestAccess().getAGDayGDayParserRuleCall_17_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AGMonthAssignment_18_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthGMonthParserRuleCall_18_1_0()); }
	ruleGMonth{ after(grammarAccess.getDataTypeTestAccess().getAGMonthGMonthParserRuleCall_18_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AGMonthDayAssignment_19_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGMonthDayGMonthDayParserRuleCall_19_1_0()); }
	ruleGMonthDay{ after(grammarAccess.getDataTypeTestAccess().getAGMonthDayGMonthDayParserRuleCall_19_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AGYearAssignment_20_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearGYearParserRuleCall_20_1_0()); }
	ruleGYear{ after(grammarAccess.getDataTypeTestAccess().getAGYearGYearParserRuleCall_20_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AGYearMonthAssignment_21_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAGYearMonthGYearMonthParserRuleCall_21_1_0()); }
	ruleGYearMonth{ after(grammarAccess.getDataTypeTestAccess().getAGYearMonthGYearMonthParserRuleCall_21_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AHexBinaryAssignment_22_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAHexBinaryHexBinaryParserRuleCall_22_1_0()); }
	ruleHexBinary{ after(grammarAccess.getDataTypeTestAccess().getAHexBinaryHexBinaryParserRuleCall_22_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AIDREFAssignment_23_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFIDREFParserRuleCall_23_1_0()); }
	ruleIDREF{ after(grammarAccess.getDataTypeTestAccess().getAIDREFIDREFParserRuleCall_23_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AIDREFSAssignment_24_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIDREFSIDREFSParserRuleCall_24_1_0()); }
	ruleIDREFS{ after(grammarAccess.getDataTypeTestAccess().getAIDREFSIDREFSParserRuleCall_24_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AIntAssignment_25_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntInt0ParserRuleCall_25_1_0()); }
	ruleInt0{ after(grammarAccess.getDataTypeTestAccess().getAIntInt0ParserRuleCall_25_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AIntegerAssignment_26_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAIntegerIntegerParserRuleCall_26_1_0()); }
	ruleInteger{ after(grammarAccess.getDataTypeTestAccess().getAIntegerIntegerParserRuleCall_26_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ALanguageAssignment_27_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALanguageLanguageParserRuleCall_27_1_0()); }
	ruleLanguage{ after(grammarAccess.getDataTypeTestAccess().getALanguageLanguageParserRuleCall_27_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ALongAssignment_28_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getALongLongParserRuleCall_28_1_0()); }
	ruleLong{ after(grammarAccess.getDataTypeTestAccess().getALongLongParserRuleCall_28_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANameAssignment_29_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANameNameParserRuleCall_29_1_0()); }
	ruleName{ after(grammarAccess.getDataTypeTestAccess().getANameNameParserRuleCall_29_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANCNameAssignment_30_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANCNameNCNameParserRuleCall_30_1_0()); }
	ruleNCName{ after(grammarAccess.getDataTypeTestAccess().getANCNameNCNameParserRuleCall_30_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANMTOKENAssignment_31_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENNMTOKENParserRuleCall_31_1_0()); }
	ruleNMTOKEN{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENNMTOKENParserRuleCall_31_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANMTOKENSAssignment_32_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANMTOKENSNMTOKENSParserRuleCall_32_1_0()); }
	ruleNMTOKENS{ after(grammarAccess.getDataTypeTestAccess().getANMTOKENSNMTOKENSParserRuleCall_32_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANonNegativeIntegerAssignment_33_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0()); }
	ruleNonNegativeInteger{ after(grammarAccess.getDataTypeTestAccess().getANonNegativeIntegerNonNegativeIntegerParserRuleCall_33_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ANonPositiveIntegerAssignment_34_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0()); }
	ruleNonPositiveInteger{ after(grammarAccess.getDataTypeTestAccess().getANonPositiveIntegerNonPositiveIntegerParserRuleCall_34_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__APositiveIntegerAssignment_35_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0()); }
	rulePositiveInteger{ after(grammarAccess.getDataTypeTestAccess().getAPositiveIntegerPositiveIntegerParserRuleCall_35_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AQNameAssignment_36_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAQNameQNameParserRuleCall_36_1_0()); }
	ruleQName{ after(grammarAccess.getDataTypeTestAccess().getAQNameQNameParserRuleCall_36_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AShortAssignment_37_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAShortShortParserRuleCall_37_1_0()); }
	ruleShort{ after(grammarAccess.getDataTypeTestAccess().getAShortShortParserRuleCall_37_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AStringAssignment_38_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAStringString0ParserRuleCall_38_1_0()); }
	ruleString0{ after(grammarAccess.getDataTypeTestAccess().getAStringString0ParserRuleCall_38_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ATimeAssignment_39_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATimeTimeParserRuleCall_39_1_0()); }
	ruleTime{ after(grammarAccess.getDataTypeTestAccess().getATimeTimeParserRuleCall_39_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__ATokenAssignment_40_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getATokenTokenParserRuleCall_40_1_0()); }
	ruleToken{ after(grammarAccess.getDataTypeTestAccess().getATokenTokenParserRuleCall_40_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AUnsignedByteAssignment_41_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedByteUnsignedByteParserRuleCall_41_1_0()); }
	ruleUnsignedByte{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedByteUnsignedByteParserRuleCall_41_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AUnsignedIntAssignment_42_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedIntUnsignedIntParserRuleCall_42_1_0()); }
	ruleUnsignedInt{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedIntUnsignedIntParserRuleCall_42_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AUnsignedLongAssignment_43_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedLongUnsignedLongParserRuleCall_43_1_0()); }
	ruleUnsignedLong{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedLongUnsignedLongParserRuleCall_43_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeTest__AUnsignedShortAssignment_44_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeTestAccess().getAUnsignedShortUnsignedShortParserRuleCall_44_1_0()); }
	ruleUnsignedShort{ after(grammarAccess.getDataTypeTestAccess().getAUnsignedShortUnsignedShortParserRuleCall_44_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


