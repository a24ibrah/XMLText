// automatically generated by Xtext
grammar org.xtext.example.mydsl.datatypes.MyDsl with org.eclipse.xtext.common.Terminals

import "http://example.com/example-with-datetypes" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DataTypeTest returns DataTypeTest:
	{DataTypeTest}
	'DataTypeTest'
	aID=ID0
	'{'
		('aAnySimpleType' aAnySimpleType=AnySimpleType)?
		('aAnyURI' aAnyURI=AnyURI)?
		('aBase64Binary' aBase64Binary=Base64Binary)?
		('aBoolean' aBoolean=Boolean)?
		('aByte' aByte=Byte)?
		('aDate' aDate=Date)?
		('aDateTime' aDateTime=DateTime)?
		('aDecimal' aDecimal=Decimal)?
		('aDouble' aDouble=Double)?
		('aDuration' aDuration=Duration)?
		('aEntities' aEntities=ENTITIES)?
		('aEntity' aEntity=ENTITY)?
		('aFloat' aFloat=Float)?
		('aGDay' aGDay=GDay)?
		('aGMonth' aGMonth=GMonth)?
		('aGMonthDay' aGMonthDay=GMonthDay)?
		('aGYear' aGYear=GYear)?
		('aGYearMonth' aGYearMonth=GYearMonth)?
		('aHexBinary' aHexBinary=HexBinary)?
		('aIDREF' aIDREF=IDREF)?
		('aIDREFS' aIDREFS=IDREFS)?
		('aInt' aInt=Int0)?
		('aInteger' aInteger=Integer)?
		('aLanguage' aLanguage=Language)?
		('aLong' aLong=Long)?
		('aName' aName=Name)?
		('aNCName' aNCName=NCName)?
		('aNMTOKEN' aNMTOKEN=NMTOKEN)?
		('aNMTOKENS' aNMTOKENS=NMTOKENS)?
		('aNonNegativeInteger' aNonNegativeInteger=NonNegativeInteger)?
		('aNonPositiveInteger' aNonPositiveInteger=NonPositiveInteger)?
		('aPositiveInteger' aPositiveInteger=PositiveInteger)?
		('aQName' aQName=QName)?
		('aShort' aShort=Short)?
		('aString' aString=String0)?
		('aTime' aTime=Time)?
		('aToken' aToken=Token)?
		('aUnsignedByte' aUnsignedByte=UnsignedByte)?
		('aUnsignedInt' aUnsignedInt=UnsignedInt)?
		('aUnsignedLong' aUnsignedLong=UnsignedLong)?
		('aUnsignedShort' aUnsignedShort=UnsignedShort)?
	'}';

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType' /* TODO: implement this rule and an appropriate IValueConverter */;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Base64Binary returns type::Base64Binary:
	'Base64Binary' /* TODO: implement this rule and an appropriate IValueConverter */;

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

Byte returns type::Byte:
	'Byte' /* TODO: implement this rule and an appropriate IValueConverter */;

Date returns type::Date:
	'Date' /* TODO: implement this rule and an appropriate IValueConverter */;

DateTime returns type::DateTime:
	'DateTime' /* TODO: implement this rule and an appropriate IValueConverter */;

Decimal returns type::Decimal:
	'Decimal' /* TODO: implement this rule and an appropriate IValueConverter */;

Double returns type::Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

Duration returns type::Duration:
	'Duration' /* TODO: implement this rule and an appropriate IValueConverter */;

ENTITIES returns type::ENTITIES:
	'ENTITIES' /* TODO: implement this rule and an appropriate IValueConverter */;

ENTITY returns type::ENTITY:
	'ENTITY' /* TODO: implement this rule and an appropriate IValueConverter */;

Float returns type::Float:
	'Float' /* TODO: implement this rule and an appropriate IValueConverter */;

GDay returns type::GDay:
	'GDay' /* TODO: implement this rule and an appropriate IValueConverter */;

GMonth returns type::GMonth:
	'GMonth' /* TODO: implement this rule and an appropriate IValueConverter */;

GMonthDay returns type::GMonthDay:
	'GMonthDay' /* TODO: implement this rule and an appropriate IValueConverter */;

GYear returns type::GYear:
	'GYear' /* TODO: implement this rule and an appropriate IValueConverter */;

GYearMonth returns type::GYearMonth:
	'GYearMonth' /* TODO: implement this rule and an appropriate IValueConverter */;

HexBinary returns type::HexBinary:
	'HexBinary' /* TODO: implement this rule and an appropriate IValueConverter */;

ID0 returns type::ID:
	'ID' /* TODO: implement this rule and an appropriate IValueConverter */;

IDREF returns type::IDREF:
	'IDREF' /* TODO: implement this rule and an appropriate IValueConverter */;

IDREFS returns type::IDREFS:
	'IDREFS' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Integer returns type::Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;

Language returns type::Language:
	'Language' /* TODO: implement this rule and an appropriate IValueConverter */;

Long returns type::Long:
	'Long' /* TODO: implement this rule and an appropriate IValueConverter */;

Name returns type::Name:
	'Name' /* TODO: implement this rule and an appropriate IValueConverter */;

NCName returns type::NCName:
	'NCName' /* TODO: implement this rule and an appropriate IValueConverter */;

NMTOKEN returns type::NMTOKEN:
	'NMTOKEN' /* TODO: implement this rule and an appropriate IValueConverter */;

NMTOKENS returns type::NMTOKENS:
	'NMTOKENS' /* TODO: implement this rule and an appropriate IValueConverter */;

NonNegativeInteger returns type::NonNegativeInteger:
	'NonNegativeInteger' /* TODO: implement this rule and an appropriate IValueConverter */;

NonPositiveInteger returns type::NonPositiveInteger:
	'NonPositiveInteger' /* TODO: implement this rule and an appropriate IValueConverter */;

PositiveInteger returns type::PositiveInteger:
	'PositiveInteger' /* TODO: implement this rule and an appropriate IValueConverter */;

QName returns type::QName:
	'QName' /* TODO: implement this rule and an appropriate IValueConverter */;

Short returns type::Short:
	'Short' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Time returns type::Time:
	'Time' /* TODO: implement this rule and an appropriate IValueConverter */;

Token returns type::Token:
	'Token' /* TODO: implement this rule and an appropriate IValueConverter */;

UnsignedByte returns type::UnsignedByte:
	'UnsignedByte' /* TODO: implement this rule and an appropriate IValueConverter */;

UnsignedInt returns type::UnsignedInt:
	'UnsignedInt' /* TODO: implement this rule and an appropriate IValueConverter */;

UnsignedLong returns type::UnsignedLong:
	'UnsignedLong' /* TODO: implement this rule and an appropriate IValueConverter */;

UnsignedShort returns type::UnsignedShort:
	'UnsignedShort' /* TODO: implement this rule and an appropriate IValueConverter */;
